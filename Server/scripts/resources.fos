/**
* Author: wladimiiir
*/

#include "_macros.fos"
#include "_msgstr.fos"
#include "entire.fos"

uint16[] ScavengeSources = {2220, 2221, 2222, 2223, 2252, 2253, 2257, 2265, 2266, 2267, 2268, 2269, 2270, 2275, 2276, 2311, 2315, 2005, 2006};
uint16[] SpecialJunk = {
							PID_SPECTACLES, PID_OXYGEN_TANK, PID_MIRROR_SHADES, PID_DOG_TAGS, PID_TAPE_RECORDER, 
							PID_RANGER_MAP, PID_RAIDERS_MAP, PID_SHERIFF_BADGE, PID_SECURITY_CARD, PID_BIG_BOOK_OF_SCIENCE,
							PID_DEANS_ELECTRONICS, PID_FIRST_AID_BOOK, PID_SCOUT_HANDBOOK, PID_GUNS_AND_BULLETS,
							PID_CATS_PAW, PID_TECHNICAL_MANUAL, PID_CHEMISTRY_MANUAL, PID_CATS_PAW_ISSUE_5, PID_HUBOLOGIST_BOOK
						};

//import void AddResources(Map& map, Critter@[]@ players) from "resources";
void AddResources(Map& map, Critter@[]@ players)
{
	uint16 hexX = 0;
	uint16 hexY = 0;
	Location @ location = map.GetLocation();
	if (!valid(location))
		return;
	uint locPid = location.GetProtoId();

	if( locPid >= LOCATION_CityEncounter1 && locPid <= LOCATION_CityEncounter8 )
		AddJunk(map);
	if( locPid >= LOCATION_MountainEncounter1 && locPid <= LOCATION_MountainEncounter7 )
		AddFlint(map);
}

void AddJunk(Map& map)
{
	Scenery@[] sceneries;
	for (uint i = 0; i < ScavengeSources.length(); i++)
		map.GetSceneries(ScavengeSources[i], sceneries);

	uint scavengeCount = MAX(3, sceneries.length() / 4);
	for (uint i = 0; i < scavengeCount && sceneries.length() > 0; i++)
	{
		uint index = Random(0, sceneries.length() - 1);
		ScavengeResources.insertLast(ScavengeResource(map, sceneries[index]));
		sceneries.removeAt(index);
	}
}

bool _ScavengeSourceInit( Critter& critter, Scenery& scenery, int skill, Item@ item )
{
	if(skill == SKILL_PICK_ON_GROUND)
	{
		critter.Say(SAY_NETMSG, "There could be some usefull stuff here. I should check it out. (use Science skill)");
		return true;
	}
	if(skill != SK_SCIENCE)
		return false;
	
	Map@ map = critter.GetMap();
	if(!valid(map))
		return false;
	
	ScavengeResource@ resource = GetScavengeResource(map, scenery);
	if(!valid(resource))
	{
		critter.Say(SAY_NETMSG, "You haven't found anything usefull.");
		return true;
	}
	
	resource.Scavenge(critter);
	return true;
}

void AddFlint(Map& map)
{
	Entire[] entires;
	ParseEntires(map, entires, ENTIRE_RESOURCE_FLINT);
	
	for (uint i = 0; i < entires.length(); i++)
		map.AddItem(entires[i].HexX, entires[i].HexY, PID_FLINT, 1); 
}

ScavengeResource@[] ScavengeResources;
ScavengeResource@ GetScavengeResource(Map@ map, Scenery& scenery)
{
	if(!valid(map))
		return null;
		
	for (uint i = 0; i < ScavengeResources.length(); i++)
		if(ScavengeResources[i].IsSource(map, scenery))
			return ScavengeResources[i];
			
	return null;
}

void DeleteScavengeResource(ScavengeResource& resource)
{
	for (uint i = 0; i < ScavengeResources.length(); i++)
		if(ScavengeResources[i].Equals(resource))
		{
			ScavengeResources.removeAt(i);
			break;
		}
}

class ScavengeResource
{
	private uint SceneryMap;
	private uint SceneryPid;
	private uint SceneryHexX;
	private uint SceneryHexY;
	private uint BottleCaps;
	private uint SpecialJunkPid;
	private uint ElectronicParts;
	private uint Tubes;
	private uint Junk;
	
	ScavengeResource(Map& map, Scenery& scenery)
	{
		SceneryMap = map.Id;
		SceneryPid = scenery.ProtoId;
		SceneryHexX = scenery.HexX;
		SceneryHexY = scenery.HexY;
		BottleCaps = HAS_CHANCE(10) ? Random(3, 12) : 0;
		SpecialJunkPid = HAS_CHANCE(2.5) ? SpecialJunk[Random(0, SpecialJunk.length() - 1)] : 0;
		ElectronicParts = HAS_CHANCE(30) ? Random(1, 2) : 0;
		Tubes = HAS_CHANCE(20) ? 1 : 0;
		Junk = Random(0, 3);
	}
	
	bool Equals(ScavengeResource& resource)
	{
		return resource.SceneryMap == SceneryMap 
				&& resource.SceneryPid == SceneryPid
				&& resource.SceneryHexX == SceneryHexX
				&& resource.SceneryHexY == SceneryHexY;
	}
	
	bool IsSource(Map& map, Scenery& scenery)
	{
		return map.Id == SceneryMap 
				&& scenery.ProtoId == SceneryPid
				&& scenery.HexX == SceneryHexX
				&& scenery.HexY == SceneryHexY;
	}
	
	void Scavenge(Critter& scavenger)
	{
		bool found = false;
		if(Junk > 0)
		{
			scavenger.AddItem(PID_JUNK, Junk);
			Junk = 0;
			scavenger.Say(SAY_NETMSG, "You have found some junk.");
			found = true;
		}
		if(ElectronicParts > 0)
		{
			scavenger.AddItem(PID_ELECTRONIC_PARTS, ElectronicParts);
			ElectronicParts = 0;
			scavenger.Say(SAY_NETMSG, "You have found some electronic parts.");
			found = true;
		}
		if(Tubes > 0)
		{
			scavenger.AddItem(PID_TUBE, Tubes);
			Tubes = 0;
			scavenger.Say(SAY_NETMSG, "You have found a tube.");
			found = true;
		}	
		if(SpecialJunkPid > 0)
		{
			scavenger.AddItem(SpecialJunkPid, 1);
			SpecialJunkPid = 0;
			scavenger.Say(SAY_NETMSG, "You have found something of value.");
			found = true;
		}
		if(BottleCaps > 0)
		{
			scavenger.AddItem(PID_BOTTLE_CAPS, BottleCaps);
			BottleCaps = 0;
			scavenger.Say(SAY_NETMSG, "You have found some bootle caps.");
			found = true;
		}
		if(!found)
			scavenger.Say(SAY_NETMSG, "You haven't found anything usefull.");
	}
}

   
