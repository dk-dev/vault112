// Author: cvet
// client stuff for radio
#include "_macros.fos"
#include "_client_defines.fos"
#include "client_gui_h.fos"
#include "_colors.fos"
#include "_msgstr.fos"

#ifdef CLIENT_GUI_MOD_V04
class ScreenMain : IGUIScreenCallbackShow
{
	ButtonSendRecv@ Send;
	ButtonSendRecv@ Recv;

	TextboxChannel@ Channel;

	int BroadcastSendType;
	int BroadcastRecvType;

	ButtonBroadcast@[] BroadcastSend;
	ButtonBroadcast@[] BroadcastRecv;

	int RadioId;
	int RadioChannel;
	int RadioBroadcastSend;
	int RadioBroadcastRecv;
	int RadioFlags;

	void OnShow(int radioId, int radioChannel, int radioData)
	{
		// Store data
		RadioId=radioId;
		RadioChannel=radioChannel;
		RadioBroadcastSend=(radioData>>16)&0xFF;
		RadioBroadcastRecv=(radioData>>24)&0xFF;
		RadioFlags=radioData&0xFFFF;

		// Set actual GUI states
		Channel.SetChannel(RadioChannel);

		Send.setState(not FLAG(RadioFlags,RADIO_DISABLE_SEND));
		Recv.setState(not FLAG(RadioFlags,RADIO_DISABLE_RECV));

		BroadcastSendType=0;
		if(RadioBroadcastSend==RADIO_BROADCAST_WORLD) BroadcastSendType=1;
		else if(RadioBroadcastSend==RADIO_BROADCAST_ZONE(5)) BroadcastSendType=2;
		else if(RadioBroadcastSend==RADIO_BROADCAST_ZONE(2)) BroadcastSendType=3;
		else if(RadioBroadcastSend==RADIO_BROADCAST_LOCATION) BroadcastSendType=4;
		else if(RadioBroadcastSend==RADIO_BROADCAST_MAP) BroadcastSendType=5;
		for(uint i=0;i<BroadcastSend.length();i++) BroadcastSend[i].setState(false);
		if(BroadcastSendType!=0) BroadcastSend[BroadcastSendType-1].setState(true);

		BroadcastRecvType=0;
		if(RadioBroadcastRecv==RADIO_BROADCAST_WORLD) BroadcastRecvType=1;
		else if(RadioBroadcastRecv==RADIO_BROADCAST_ZONE(5)) BroadcastRecvType=2;
		else if(RadioBroadcastRecv==RADIO_BROADCAST_ZONE(2)) BroadcastRecvType=3;
		else if(RadioBroadcastRecv==RADIO_BROADCAST_LOCATION) BroadcastRecvType=4;
		else if(RadioBroadcastRecv==RADIO_BROADCAST_MAP) BroadcastRecvType=5;
		for(uint i=0;i<BroadcastRecv.length();i++) BroadcastRecv[i].setState(false);
		if(BroadcastRecvType!=0) BroadcastRecv[BroadcastRecvType-1].setState(true);
	}

	void ChangeChannel()
	{
		if(RadioChannel==Channel.RadioChannel) return;
		RadioChannel=Channel.RadioChannel;
		RunServerScriptUnsafe("radio@unsafe_ChangeChannel",RadioId,RadioChannel,0,null,null);
		Message(TEXTMSG_GAME,STR_RADIO_CHANNEL_CHANGED);
	}

	void ChangeActivity(bool isSend)
	{
		int shiftFlag=(isSend?RADIO_DISABLE_SHIFT_SEND:RADIO_DISABLE_SHIFT_RECV);
		int disabledFlag=(isSend?RADIO_DISABLE_SEND:RADIO_DISABLE_RECV);
		uint cantShiftStr=(isSend?STR_RADIO_CANT_SHIFT_SEND:STR_RADIO_CANT_SHIFT_RECV);
		uint beginStr=(isSend?STR_RADIO_BROADCAST_SEND_BEGIN:STR_RADIO_BROADCAST_RECV_BEGIN);
		uint endStr=(isSend?STR_RADIO_BROADCAST_SEND_END:STR_RADIO_BROADCAST_RECV_END);

		if(not FLAG(RadioFlags,shiftFlag))
		{
			RadioFlags^=disabledFlag;
			RunServerScriptUnsafe("radio@unsafe_ChangeActivity",RadioId,isSend?1:0,0,null,null);

			if(not FLAG(RadioFlags,disabledFlag))
				Message(TEXTMSG_GAME,beginStr);
			else
				Message(TEXTMSG_GAME,endStr);
		}
		else
		{
			Message(TEXTMSG_GAME,cantShiftStr);
		}

		if(isSend)
			Send.setState(not FLAG(RadioFlags,disabledFlag));
		else
			Recv.setState(not FLAG(RadioFlags,disabledFlag));
	}

	void ChangeBroadcast(bool isSend, int type)
	{
		int shiftFlag=(isSend?RADIO_DISABLE_SHIFT_BC_SEND:RADIO_DISABLE_SHIFT_BC_RECV);
		uint cantShiftStr=(isSend?STR_RADIO_CANT_SHIFT_BC_SEND:STR_RADIO_CANT_SHIFT_BC_RECV);
		uint changeStr=(isSend?STR_RADIO_BROADCAST_SEND_CHANGE:STR_RADIO_BROADCAST_RECV_CHANGE);

		if((RadioFlags&shiftFlag)!=0)
		{
			Message(TEXTMSG_GAME,cantShiftStr);
			return;
		}

		if(isSend)
			BroadcastSendType=type;
		else
			BroadcastRecvType=type;

		int newBroadcastSend=RADIO_BROADCAST_WORLD;
		if(BroadcastSendType==2) newBroadcastSend=RADIO_BROADCAST_ZONE(5);
		else if(BroadcastSendType==3) newBroadcastSend=RADIO_BROADCAST_ZONE(2);
		else if(BroadcastSendType==4) newBroadcastSend=RADIO_BROADCAST_LOCATION;
		else if(BroadcastSendType==5) newBroadcastSend=RADIO_BROADCAST_MAP;
		else BroadcastSendType=1;
		int newBroadcastRecv=RADIO_BROADCAST_WORLD;
		if(BroadcastRecvType==2) newBroadcastRecv=RADIO_BROADCAST_ZONE(5);
		else if(BroadcastRecvType==3) newBroadcastRecv=RADIO_BROADCAST_ZONE(2);
		else if(BroadcastRecvType==4) newBroadcastRecv=RADIO_BROADCAST_LOCATION;
		else if(BroadcastRecvType==5) newBroadcastRecv=RADIO_BROADCAST_MAP;
		else BroadcastRecvType=1;

		if(RadioBroadcastSend==newBroadcastSend && RadioBroadcastRecv==newBroadcastRecv) return;

		RadioBroadcastSend=newBroadcastSend;
		RadioBroadcastRecv=newBroadcastRecv;
		RunServerScriptUnsafe("radio@unsafe_ChangeBroadcast",RadioId,RadioBroadcastSend,RadioBroadcastRecv,null,null);
		Message(TEXTMSG_GAME,changeStr);

		for(uint i=0;i<BroadcastSend.length();i++) BroadcastSend[i].setState(false);
		BroadcastSend[BroadcastSendType-1].setState(true);
		for(uint i=0;i<BroadcastRecv.length();i++) BroadcastRecv[i].setState(false);
		BroadcastRecv[BroadcastRecvType-1].setState(true);
	}
}

class ButtonSendRecv : IGUIElementCallbackMouseClick, IGUIElementCallbackInit
{
	ScreenMain@ Instance;
	IGUIElementCheckBoxOpt@ Options;
	bool IsSend;

	ButtonSendRecv(ScreenMain& instance, bool isSend)
	{
		@Instance=instance;
		IsSend=isSend;
		if(IsSend)
			@Instance.Send=this;
		else
			@Instance.Recv=this;
	}

	void OnMouseClick(int id, int click)
	{
		if(click==MOUSE_CLICK_LEFT)
			Instance.ChangeActivity(IsSend);
	}

	void OnInit(int id)
	{
		@Options=GUI_GetElementCheckBoxOptions();
	}

	void setState(bool state)
	{
		if(@Options!=null) Options.setState(state);
		else Message("Null");
	}
}

class ButtonRefresh : IGUIElementCallbackMouseClick
{
	ScreenMain@ Instance;

	ButtonRefresh(ScreenMain& instance)
	{
		@Instance=instance;
	}

	void OnMouseClick(int id,int click)
	{
		if((Instance.RadioFlags&RADIO_DISABLE_SHIFT_CHANNEL)==0)
			Instance.ChangeChannel();
		else
			Message(TEXTMSG_GAME,STR_RADIO_CANT_SHIFT_CHANNEL);
	}
}

class ButtonBroadcast : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
	ScreenMain@ Instance;
	IGUIElementCheckBoxOpt@ Options;
	bool IsSend;
	int Type;

	ButtonBroadcast(ScreenMain& instance, bool isSend, int type)
	{
		@Instance=instance;
		IsSend=isSend;
		Type=type;
		if(isSend)
			@Instance.BroadcastSend[type-1]=this;
		else
			@Instance.BroadcastRecv[type-1]=this;
	}

	void OnMouseClick(int id, int click)
	{
		if(click==MOUSE_CLICK_LEFT)
		{
			Instance.ChangeBroadcast(IsSend,Type);
			Options.setState(true);
		}
	}

	void OnInit(int id)
	{
		@Options=GUI_GetElementCheckBoxOptions();
	}

	void setState(bool state)
	{
		Options.setState(state);
	}
}

class TextboxChannel : IGUIElementCallbackInit, IGUIElementCallbackKeyPress
{
	ScreenMain@ Instance;
	IGUIElementEditBoxOpt@ Options;
	uint16 RadioChannel;

	TextboxChannel(ScreenMain& instance)
	{
		@Instance=instance;
		@Instance.Channel=this;
	}

	void OnInit(int id)
	{
		@Options=GUI_GetElementEditBoxOptions();
	}

	bool OnKeyPress(uint8 key, uint8 letter)
	{
		string@ tekst=Options.getText();

		if((Instance.RadioFlags&RADIO_DISABLE_SHIFT_CHANNEL)==0)
		{
			if(tekst.length()>0 && tekst[tekst.length()-1]=='\n') tekst.resize(tekst.length()-1);

			int channel=0;
			StrToInt(tekst,channel);
			channel=CLAMP(channel,0,0xFFFF);
			Options.Text(""+channel);
			RadioChannel=channel;
			if(key==DIK_RETURN || key==DIK_NUMPADENTER) Instance.ChangeChannel();
		}
		else
		{
			Options.Text(""+RadioChannel);
			Message(TEXTMSG_GAME,STR_RADIO_CANT_SHIFT_CHANNEL);
		}
		return false;
	}

	void SetChannel(uint16 channel)
	{
		RadioChannel=channel;
		if(@Options != null) Options.Text(""+channel);
		else Message("null, null");
	}
}
#endif 

void InitRadioScreen() // Export
{
#ifdef CLIENT_GUI_MOD_V04
	// Main screen
	ScreenMain screenMain;
	GUI_CreateScreen(CLIENT_SCREEN_RADIO,GetIfaceIniStr("RadioMainPic"))
		.CallbackShow(screenMain)
		.CloseOnMiss(true)
		.AutoCursor(true,CURSOR_DEFAULT);

	GUI_AddText(CLIENT_SCREEN_RADIO)
		.Position("RadioMainText")
		.Text(GetMsgStr(TEXTMSG_GAME,STR_RADIO_MAIN),FONT_FALLOUT,COLOR_SAND,0,FT_CENTERX|FT_CENTERY|FT_BORDERED);

	// Channel textbox
	TextboxChannel textboxChannel(screenMain);
	GUI_AddEditBox(CLIENT_SCREEN_RADIO)
		.CallbackInit(textboxChannel)
		.CallbackKeyPress(textboxChannel)
		.Position("RadioChannel")
		.Text("0")
		.NumericMode(true)
		.MaxLen(5)
		.LeftMargin(4)
		.RightMargin(4)
		.UpMargin(4)
		.DownMargin(4);

	GUI_AddText(CLIENT_SCREEN_RADIO)
		.Position("RadioChannelText")
		.Text(GetMsgStr(TEXTMSG_GAME,STR_RADIO_CHANNEL),FONT_FALLOUT,COLOR_SAND,0,FT_CENTERX|FT_CENTERY|FT_BORDERED);

	// Refresh radio channel
	ButtonRefresh buttonRefresh(screenMain);
	GUI_AddButton(CLIENT_SCREEN_RADIO)
		.Position("RadioRefresh")
		.CallbackMouseClick(buttonRefresh)
		.DownPic(GetIfaceIniStr("RadioRefreshPicDn"));

	GUI_AddText(CLIENT_SCREEN_RADIO)
		.Position("RadioRefreshText")
		.Text(GetMsgStr(TEXTMSG_GAME,STR_RADIO_REFRESH),FONT_FALLOUT,COLOR_SAND,0,FT_CENTERX|FT_CENTERY|FT_BORDERED);

	// Broadcast
	GUI_AddText(CLIENT_SCREEN_RADIO)
		.Position("RadioBroadcastSendText")
		.Text(GetMsgStr(TEXTMSG_GAME,STR_RADIO_BROADCAST_SEND),FONT_FALLOUT,COLOR_SAND,0,FT_CENTERY|FT_BORDERED);
	GUI_AddText(CLIENT_SCREEN_RADIO)
		.Position("RadioBroadcastRecvText")
		.Text(GetMsgStr(TEXTMSG_GAME,STR_RADIO_BROADCAST_RECV),FONT_FALLOUT,COLOR_SAND,0,FT_CENTERR|FT_CENTERY|FT_BORDERED);

	ButtonSendRecv buttonSend(screenMain,true);
	GUI_AddCheckBox(CLIENT_SCREEN_RADIO)
		.Position("RadioBroadcastSend")
		.CallbackInit(buttonSend)
		.CallbackMouseClick(buttonSend)
		.CheckedPic(GetIfaceIniStr("RadioBroadcastSendPicDn"));

	ButtonSendRecv buttonRecv(screenMain,false);
	GUI_AddCheckBox(CLIENT_SCREEN_RADIO)
		.Position("RadioBroadcastRecv")
		.CallbackMouseClick(buttonRecv)
		.CallbackInit(buttonRecv)
		.CheckedPic(GetIfaceIniStr("RadioBroadcastRecvPicDn"));

	screenMain.BroadcastSend.resize(5);
	screenMain.BroadcastRecv.resize(5);
	for(uint i=1;i<=5;i++)
	{
		ButtonBroadcast buttonBroadcastSend(screenMain,true,i);
		GUI_AddCheckBox(CLIENT_SCREEN_RADIO)
			.Position("RadioBroadcastSend"+i)
			.CallbackMouseClick(buttonBroadcastSend)
			.CallbackInit(buttonBroadcastSend)
			.CheckedPic(GetIfaceIniStr("RadioBroadcastSend"+i+"PicDn"));

		ButtonBroadcast buttonBroadcastRecv(screenMain,false,i);
		GUI_AddCheckBox(CLIENT_SCREEN_RADIO)
			.Position("RadioBroadcastRecv"+i)
			.CallbackMouseClick(buttonBroadcastRecv)
			.CallbackInit(buttonBroadcastRecv)
			.CheckedPic(GetIfaceIniStr("RadioBroadcastRecv"+i+"PicDn"));

		GUI_AddText(CLIENT_SCREEN_RADIO)
			.Position("RadioBroadcast"+i+"Text")
			.Text(GetMsgStr(TEXTMSG_GAME,STR_RADIO_BROADCAST1+i-1),FONT_FALLOUT,COLOR_SAND,0,FT_CENTERX|FT_CENTERY|FT_BORDERED);
	}
#endif
#ifndef CLIENT_GUI_MOD_V04
	Message("Error, you need CLIENT_GUI_MOD_V04 to use this script!");
#endif
}

void ShowEditScreen(int itemId, int, int, string@, int[]@)
{
#ifdef CLIENT_GUI_MOD_V04
	CritterCl@ chosen=GetChosen();
	if(not valid(chosen)) return;

	ItemCl@[] items;
	uint count=chosen.GetItems(-1,items);
	for(uint i=0,j=items.length();i<j;i++)
	{
		ItemCl@ item=items[i];
		if(item.Id==uint(itemId)) ShowScreen(CLIENT_SCREEN_RADIO,item.Id,item.RadioChannel,
			(item.RadioBroadcastRecv<<24)|(item.RadioBroadcastSend<<16)|(item.RadioFlags));
	}
#endif
#ifndef CLIENT_GUI_MOD_V04
	Message("Error, you need CLIENT_GUI_MOD_V04 to use this script!");
#endif
}















