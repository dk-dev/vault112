/**
* Author: wladimiiir
*/

#include "_macros.fos"
#include "entire.fos"
#include "_npc_pids.fos"
#include "npc_spawn_h.fos"
#include "wrappers.fos"

#ifdef __MONO_RUNTIME__
	#pragma bindfunc "void InitCritter1(Critter&) -> mono VirtualRealityRoles::InitCritter1"
#endif
#ifndef __MONO_RUNTIME__
	void InitCritter1(Critter&){}
#endif

#define	ENTIRE_TERMINAL			(100)
#define VIRTUAL_REALITY_TEAM	(1000)

const uint[] HEALING_DRUGS = {PID_SUPER_STIMPAK, PID_STIMPAK, PID_HEALING_POWDER};

/**
* Map script
*/
void InitMap(Map& map, bool firstTime)
{
	if(!firstTime)
		return;

	Entire[] entires;
	ParseEntires(map, entires, ENTIRE_TERMINAL);
	
	for (uint i = 0; i < entires.length(); i++)
	{		
		Item@ terminal = map.AddItem(entires[i].HexX, entires[i].HexY, PID_TERMINAL_SW, 1);
		if(valid(terminal))
			terminal.SetScript("TerminalInit");
	}
}

/**
* Initializing critter on first entire
*/
void InitCritter1(Critter& critter, bool)
{
	InitCritter1(critter);
}

/**
* Initializing critter on second entire
*/
void InitCritter2(Critter& critter, bool)
{
	InitCritter1(critter);
}

/**
* Initializing terminal
*/
void TerminalInit(Item& item, bool)
{
	item.SetEvent(ITEM_EVENT_SKILL, "TerminalSkill");
}

bool TerminalSkill(Item& door, Critter& cr, int skill)
{
	if(skill != SKILL_PICK_ON_GROUND)
		return false;
	
	//start dialog
	return true;
}

/**
* Test scripts
*
* Green forest labyrinth	=	300
* Green forest lane			=	301
*/
import Location@ CreateLocationForCritter( Critter& player, int locPid, int worldX, int worldY, int delta, int varNum ) from "location";

void CreateVirtualReality(Critter& critter, int locationPid, int combatMode, int spawnId)
{
	uint locationId = CreateLocation(locationPid, critter.WorldX, critter.WorldY, null);
	if(locationId == 0)
		return;
		
	Location@ location = GetLocation(locationId);
	if(!valid(location))
		return;
	
	location.AutoGarbage = false;
	
	Map@ map = location.GetMapByIndex(0);
	if(combatMode == COMBAT_MODE_TURN_BASED)
		map.SetTurnBasedAvailability(true);
		
	map.SetScript("InitMap");
	Critter@[] critters = SpawnNpcs(spawnId, map);
	Log("Added "+critters.length() +" critters.");
	
	critter.TransitToMap(map.Id, 0);
}
