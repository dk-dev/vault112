

void AI_TrySayCombatText(Critter&npc,int textType)
{
	if(not npc.IsLife())
	return;
	uint ai=npc.Stat[(105)];
	if(AIData_[(((ai)<(282)?(ai):0)*22+16)]<Random(1,500))
	return;
	
	uint start=0,end=0;
	if(textType>=(0)&&textType<=(3))
	{
		start=AIGeneralMsg_[AIData_[(((ai)<(282)?(ai):0)*22+17)]*8+textType*2];
		end=AIGeneralMsg_[AIData_[(((ai)<(282)?(ai):0)*22+17)]*8+textType*2+1];
	}
	if(textType>=(10)&&textType<=(17))
	{
		textType-=10;
		start=AIBodyMsg_[AIData_[(((ai)<(282)?(ai):0)*22+18)]*16+textType*2];
		end=AIBodyMsg_[AIData_[(((ai)<(282)?(ai):0)*22+18)]*16+textType*2+1];
	}
	else
	return;
	if(start<=end)
	npc.SayMsg((2),(5),Random(start,end)*10);
}

const int[]AIData_=
{
	
	0,100,-40,0,1,(0),(3),(0),(0),(1),(3),(0),0,(3),10,5,0,45,27,0,0,0,
	80,40,-40,80,1,(0),(2),(4),(4),(4),(3),(1),(2),(3),30,3,25,6,7,0,0,0,
	10,40,-40,80,1,(0),(2),(4),(4),(0),(3),(1),(2),(3),3,20,20,6,7,0,0,0,
	100,50,-40,80,1,(0),(0),(4),(4),(4),(3),(1),(2),(0),100,15,80,6,7,0,0,0,
	10,50,-40,80,1,(0),(0),(4),(4),(0),(3),(1),(2),(0),20,4,75,6,7,0,0,0,
	50,3,-40,60,1,(0),(2),(5),(4),(0),(0),0,0,(6),10,10,0,6,27,0,0,0,
	50,2,-40,5,0,(0),(0),(3),(0),(0),(0),(1),(2),(3),25,30,50,45,27,0,0,0,
	20,50,0,90,1,(5),(3),(4),(2),(0),(0),(2),0,(6),30,40,25,45,27,0,0,0,
	60,15,0,0,0,(0),(0),(1),(0),(0),(0),(2),0,(0),10000,10,0,45,27,0,0,0,
	40,17,0,0,0,(0),(0),(1),(0),(0),(0),(1),(2),(0),1000000,30,0,45,27,0,0,0,
	70,20,0,10,1,(0),(4),(3),(0),(0),(0),(1),(2),(0),20,15,0,45,27,0,0,0,
	20,10,30,20,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,30,35,11,10,0,0,0,
	10,20,4,20,1,(4),(0),(4),(3),(0),(0),(1),(2),(5),5,5,30,3,2,0,0,0,
	80,10,10,40,1,(0),(2),(0),(0),(0),(0),(1),(2),(4),1000,15,15,2,2,0,0,0,
	30,10,12,34,1,(0),(4),(0),(0),(0),(0),(1),(2),(3),10000,30,10,0,0,0,0,0,
	0,8,20,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,35,45,27,0,0,0,
	65,10,10,25,1,(4),(2),(4),(1),(0),(2),(1),(2),(4),10,8,23,2,2,0,0,0,
	33,8,8,30,1,(2),(4),(0),(0),(0),(0),(1),(2),(5),5000,20,25,1,1,0,0,0,
	90,15,1,25,1,(0),(0),(0),(0),(0),(0),(2),0,(0),40,8,16,5,2,0,0,0,
	20,10,10,28,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),3,1500,30,1,1,0,0,0,
	
	70,12,8,24,1,(0),(4),(0),(0),(0),(0),(1),(2),(4),80,30,20,0,0,0,0,0,
	80,18,0,0,0,(0),(0),(1),(0),(0),(0),(2),0,(0),600,200,0,45,27,0,0,0,
	95,19,1,15,1,(4),(4),(4),(0),(0),(2),0,0,(5),10,3,25,5,2,0,0,0,
	100,25,0,0,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,3,18,4,4,0,0,0,
	60,12,10,30,1,(0),(4),(0),(3),(0),(0),(1),(2),(5),75,20,25,2,2,0,0,0,
	95,7,0,0,1,(0),(4),(0),(3),(1),(1),(1),(2),(6),5,100,20,45,27,0,0,0,
	50,10,0,0,0,(0),(0),(1),(5),(0),(0),(1),(2),(0),20,20,0,45,27,(284),(81),(103),
	95,10,0,0,0,(0),(0),(1),(0),(0),(0),(1),(2),(0),20,20,0,45,27,0,0,0,
	50,10,0,10,0,(0),(4),(1),(0),(0),(1),(1),(2),(6),20,20,10,44,4,0,0,0,
	60,10,5,30,1,(0),(4),(3),(0),(0),(1),(1),(2),(6),20,20,0,45,27,0,0,0,
	50,10,10,30,1,(0),(2),(0),(0),(0),(0),(2),0,(0),20,20,15,9,6,0,0,0,
	100,13,0,0,1,(0),(4),(0),(0),(0),(0),(2),0,(0),20,20,20,9,6,0,0,0,
	90,10,0,0,1,(2),(4),(0),(0),(0),(2),(2),0,(6),10,10,25,9,6,0,0,0,
	20,10,30,30,1,(0),(0),(0),(0),(0),(0),(2),0,(0),20,20,25,0,0,0,0,0,
	40,10,10,20,1,(0),(4),(0),(0),(0),(0),(1),(2),(6),20,20,0,45,27,0,0,0,
	50,10,10,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,20,20,10,8,0,0,0,
	80,10,10,20,1,(1),(4),(4),(0),(0),(3),(1),(2),(0),20,4,25,10,8,0,0,0,
	40,10,10,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,20,10,10,8,0,0,0,
	80,15,8,10,1,(1),(4),(2),(5),(0),(1),(1),(2),(6),33,2,15,4,4,0,0,0,
	20,10,0,25,0,(0),(0),(0),(5),(0),(0),(1),(2),(0),20,2,0,45,27,(284),(81),(103),
	
	80,10,3,10,1,(0),(0),(0),(0),(0),(0),0,0,(6),2,200000,10,43,26,0,0,0,
	20,8,20,10,1,(0),(4),(0),(0),(0),(0),(1),(2),(0),20,20,20,1,1,0,0,0,
	2,5,30,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,20,18,2,2,0,0,0,
	35,5,15,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,20000,15,1,1,0,0,0,
	35,10,15,40,1,(0),(2),(0),(0),(0),(0),(1),(2),(4),20,15,15,2,2,0,0,0,
	35,7,15,40,1,(0),(0),(0),(1),(0),(0),(1),(2),(4),20,15,15,0,0,0,0,0,
	0,3,15,40,1,(2),(2),(2),(1),(0),(2),(1),(2),(3),20,15,15,0,0,0,0,0,
	95,15,1,20,1,(0),(4),(0),(0),(1),(0),(1),(2),(0),20,15,15,31,16,0,0,0,
	87,10,0,0,0,(0),(0),(1),(0),(0),(0),(1),(2),(0),20,15,0,45,27,0,0,0,
	35,5,15,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,20000,15,0,0,0,0,0,
	75,12,0,10,0,(4),(3),(3),(4),(0),(4),(1),(2),(0),20,200,0,45,27,(81),0,0,
	95,15,7,10,1,(0),(4),(0),(0),(0),(0),(1),(2),(0),20,1,15,10,8,0,0,0,
	45,12,10,10,1,(4),(3),(3),(4),(0),(4),(1),(2),(0),20,200,0,11,10,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(6),10,5,25,2,2,(81),0,0,
	45,12,10,10,1,(4),(2),(4),(3),(4),(2),(1),(2),(4),10,5,25,2,2,(81),0,0,
	45,12,10,10,1,(3),(0),(4),(3),(3),(5),(1),(2),(4),10,5,25,2,2,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(2),10,5,25,2,2,(81),0,0,
	1,12,10,10,1,(4),(4),(4),(3),(0),(4),(1),(2),(4),10,5,25,2,2,(81),0,0,
	45,12,10,10,1,(4),(4),(0),(1),(5),(2),(1),(2),(2),10,5,25,38,23,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(2),10,10,25,38,23,(81),0,0,
	
	45,12,10,10,1,(4),(0),(0),(3),(3),(5),(1),(2),(2),10,10,25,38,23,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(3),(0),(5),(1),(2),(1),20,200,25,38,23,(81),0,0,
	45,12,10,10,1,(4),(4),(4),(1),(0),(5),(1),(2),(2),10,10,25,38,23,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(1),(5),(2),(1),(2),(6),10,5,15,42,25,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(3),(4),(2),(1),(2),(5),10,10,15,42,25,(81),0,0,
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(4),20,200,15,42,25,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(3),20,200,15,42,25,(81),0,0,
	30,12,10,10,1,(4),(0),(0),(3),(0),(2),(3),0,(5),5,10,20,42,25,(81),0,0,
	45,12,10,10,1,(2),(3),(4),(3),(5),(2),(1),(2),(6),10,5,15,39,24,(81),0,0,
	45,12,10,10,1,(4),(3),(4),(3),(4),(2),(1),(2),(5),10,10,15,39,24,(81),0,0,
	45,12,10,10,1,(4),(0),(4),(3),(3),(4),(1),(2),(4),10,10,15,39,24,(81),0,0,
	45,12,10,10,1,(2),(4),(4),(2),(0),(5),(1),(2),(4),10,10,15,39,24,(81),0,0,
	45,12,10,10,1,(4),(3),(4),(3),(0),(2),(1),(2),(5),10,10,15,39,24,(81),0,0,
	45,12,10,10,1,(1),(4),(5),(4),(5),(1),(1),(2),(6),10,5,35,33,17,(81),0,0,
	45,12,10,10,1,(2),(4),(5),(3),(4),(2),(1),(2),(5),10,5,35,33,17,(81),0,0,
	45,12,10,10,1,(4),(0),(5),(3),(3),(4),(1),(2),(5),10,5,35,33,17,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(5),10,10,35,33,17,(81),0,0,
	75,12,10,10,1,(4),(1),(5),(3),(0),(1),(1),(2),(5),10,5,35,33,17,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(6),20,200,25,37,21,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(4),20,200,25,37,21,(81),0,0,
	
	45,12,10,10,1,(2),(0),(4),(2),(3),(4),(1),(2),(3),10,2,25,37,21,(81),0,0,
	45,12,10,10,1,(2),(2),(4),(2),(0),(4),(1),(2),(2),10,2,25,37,21,(81),0,0,
	50,12,10,10,1,(2),(2),(4),(2),(0),(4),(1),(2),(4),10,2,25,37,21,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(0),(5),(1),(1),(2),(6),20,200,10,46,27,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(0),(4),(1),(1),(2),(5),20,200,10,46,27,(81),0,0,
	45,12,10,10,1,(0),(0),(3),(0),(3),(4),(1),(2),(5),20,200,10,46,27,(81),0,0,
	45,12,10,10,1,(0),(2),(3),(0),(0),(2),(1),(2),(3),20,200,10,46,27,(81),0,0,
	80,12,0,10,1,(0),(0),(3),(0),(0),(4),0,0,(5),20,200,10,46,27,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(5),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(4),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(3),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(2),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(0),(4),(1),(2),(3),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(3),(5),(1),(1),(2),(6),20,200,25,36,20,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(3),(4),(1),(1),(2),(5),20,200,25,36,20,(81),0,0,
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(4),20,200,25,36,20,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(2),(0),(1),(1),(2),(5),20,200,25,36,20,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(3),(0),(1),(1),(2),(5),20,200,25,36,20,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(6),20,200,20,1,1,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(5),20,200,20,1,1,(81),0,0,
	
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(4),20,200,20,1,1,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(2),20,200,20,1,1,(81),0,0,
	45,12,25,10,1,(5),(2),(0),(2),(0),(2),(1),(2),(4),20,200,20,1,1,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(6),20,200,15,1,1,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(5),20,200,15,1,1,(81),0,0,
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(4),20,200,15,1,1,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(3),20,200,15,1,1,(81),0,0,
	45,12,10,10,1,(3),(0),(4),(2),(0),(4),(1),(2),(4),20,200,15,1,1,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(6),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(5),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(4),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(2),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(1),(3),(0),(0),(1),0,0,(4),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(1),(3),(0),(0),(5),(2),(1),(2),(6),10,10,15,35,19,0,0,0,
	45,12,10,10,1,(2),(3),(0),(0),(4),(2),(1),(2),(5),10,10,15,35,19,(81),0,0,
	45,12,10,10,1,(3),(0),(4),(0),(3),(4),(1),(2),(5),10,5,15,35,19,(81),0,0,
	45,12,10,10,1,(1),(2),(3),(0),(0),(3),(1),(2),(1),10,10,15,35,19,(81),0,0,
	50,12,10,10,1,(1),(4),(3),(0),(0),(3),0,0,(0),10,10,15,35,19,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(5),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(4),20,200,0,45,27,(81),0,0,
	
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(3),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(2),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(0),(0),(4),(1),(2),(3),20,200,0,45,27,(81),0,0,
	1,3,15,80,0,(4),(2),(3),(4),(0),(4),(1),(2),(1),20,200,0,45,27,(81),0,0,
	100,12,3,10,1,(4),(3),(4),(1),(0),(2),(1),(2),(0),5,4,35,32,2,(81),0,0,
	100,12,1,0,1,(4),(3),(3),(4),(0),(4),0,0,(0),2,20,0,2,2,(81),0,0,
	90,20,1,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),3000,30000,25,2,2,0,0,0,
	90,20,1,10,1,(4),(4),(4),(3),(0),(2),0,0,(5),5,4,25,5,2,0,0,0,
	90,20,1,10,1,(4),(4),(0),(0),(0),(0),0,0,(0),3000,5,30,14,22,0,0,0,
	90,20,1,10,1,(4),(4),(4),(0),(0),(2),0,0,(0),3000,5,25,31,16,0,0,0,
	100,20,1,10,1,(0),(0),(1),(0),(0),(0),0,0,(0),300,300,0,45,27,0,0,0,
	90,20,1,10,1,(0),(2),(3),(0),(0),(0),0,0,(0),3000,30000,0,45,27,0,0,0,
	90,20,1,10,0,(0),(0),(1),(0),(0),(0),0,0,(0),3000,30000,0,45,27,0,0,0,
	90,20,1,10,0,(0),(4),(3),(0),(0),(1),0,0,(6),5,30000,0,45,27,0,0,0,
	90,10,1,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),25,25,25,5,2,0,0,0,
	90,20,1,10,1,(4),(4),(4),(0),(0),(5),0,0,(0),3,3,25,13,11,0,0,0,
	90,20,1,10,1,(4),(3),(4),(0),(0),(2),0,0,(0),3,3,25,12,11,0,0,0,
	90,20,1,10,1,(0),(2),(0),(0),(0),(0),0,0,(0),3,3,0,45,27,0,0,0,
	10,10,10,10,1,(0),(4),(0),(0),(1),(1),0,0,(6),10,5000,30,17,12,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(5),(0),0,0,(0),10,5000,30,18,12,0,0,0,
	
	10,10,10,10,1,(0),(4),(0),(0),(1),(0),0,0,(3),10,5000,15,1,1,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,50,26,15,0,0,0,
	10,10,0,0,1,(4),(4),(0),(0),(1),(2),0,0,(6),5,5,15,45,27,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,6,7,0,0,0,
	10,10,10,10,0,(0),(0),(4),(0),(1),(0),0,0,(0),10,5000,15,45,27,0,0,0,
	10,10,0,0,1,(0),(3),(0),(0),(1),(0),(2),0,(6),10,5000,30,41,6,0,0,0,
	10,10,0,0,0,(0),(4),(1),(0),(1),(0),0,0,(6),4,5000,30,40,27,0,0,0,
	10,10,10,10,1,(1),(4),(0),(0),(1),(0),0,0,(5),10,5000,15,2,2,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,11,10,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,45,27,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,25,13,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,24,13,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,20,14,0,0,0,
	10,10,35,10,1,(0),(4),(0),(0),(1),(0),0,0,(5),10,5000,15,22,12,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,19,14,0,0,0,
	10,10,10,10,1,(0),(2),(0),(0),(1),(0),(2),(3),(5),10,2,15,21,14,0,0,0,
	10,12,10,0,1,(4),(4),(4),(3),(1),(5),(2),0,(5),10,2,25,22,12,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,23,13,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,23,13,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,23,13,0,0,0,
	
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,23,13,0,0,0,
	10,10,10,10,1,(3),(2),(0),(0),(1),(0),0,0,(5),5,10,15,2,14,0,0,0,
	10,10,10,10,1,(1),(4),(4),(4),(1),(1),(2),0,(6),20,6,15,8,9,(87),0,0,
	100,50,1,50,1,(1),(4),(0),(2),(1),(0),0,0,(6),10,5000,30,8,9,0,0,0,
	10,10,10,10,0,(0),(0),(3),(0),(4),(1),0,0,(6),10,5000,15,45,27,0,0,0,
	10,10,10,10,0,(0),(4),(3),(0),(5),(1),0,0,(6),10,5000,15,45,27,0,0,0,
	10,10,10,10,0,(0),(4),(3),(0),(0),(4),0,0,(4),10,5000,15,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(3),(0),(0),(1),0,0,(5),10,5000,15,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(3),(0),0,0,(0),10,5000,15,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	100,15,0,0,1,(0),(4),(0),(0),(1),(3),(2),(3),(6),1,5000,25,9,6,0,0,0,
	10,10,10,10,1,(2),(4),(4),(3),(1),(2),0,0,(5),2,3,25,5,2,(40),0,0,
	10,10,10,10,1,(0),(4),(0),(0),(0),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	100,15,0,0,1,(0),(2),(0),(0),(1),(0),0,0,(6),10,5000,25,44,4,0,0,0,
	10,10,10,80,0,(0),(0),(1),(0),(1),(0),0,0,(1),10,5000,15,45,27,0,0,0,
	10,10,100,90,1,(0),(0),(0),(0),(0),(0),0,0,(1),10,5000,15,0,0,0,0,0,
	
	10,10,10,10,1,(0),(0),(0),(0),(1),(3),0,0,(6),10,5000,15,0,0,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),10,5000,15,2,2,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),10,5000,15,2,2,0,0,0,
	100,20,0,0,1,(1),(4),(0),(0),(1),(2),0,0,(6),10,2,25,4,4,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(0),(0),0,0,(1),10,5000,15,6,7,0,0,0,
	100,20,0,0,1,(1),(3),(0),(4),(1),(2),(2),0,(6),10,2,25,6,7,0,0,0,
	10,10,10,10,0,(0),(0),(1),(0),(0),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	10,15,3,1,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10,5,0,45,27,0,0,0,
	80,22,0,1,1,(0),(0),(0),(0),(0),(0),0,0,(0),30,3,25,50,31,0,0,0,
	10,12,12,35,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),3,6,20,51,32,0,0,0,
	5,15,12,30,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,5,0,45,27,0,0,0,
	20,15,5,1,1,(0),(0),(0),(0),(0),(0),(3),0,(0),20,4,25,0,0,0,0,0,
	1,10,15,80,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),100,100,20,55,36,0,0,0,
	10,15,10,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),25,8,20,47,28,0,0,0,
	40,20,1,20,1,(0),(0),(0),(0),(0),(0),(2),0,(0),10,4,25,48,29,0,0,0,
	60,12,4,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,10,0,45,27,0,0,0,
	40,12,10,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000000,30,20,81,62,0,0,0,
	60,12,3,15,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),25,15,20,82,63,0,0,0,
	70,15,8,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,25,109,90,0,0,0,
	80,6,1,2,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,3,108,89,0,0,0,
	
	80,10,4,5,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,0,45,27,0,0,0,
	90,10,1,8,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,30,0,45,27,0,0,0,
	70,10,6,20,1,(0),(0),(0),(0),(0),(0),(2),0,(0),10000,30,25,49,30,0,0,0,
	75,10,10,20,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),15,25,23,57,38,0,0,0,
	33,10,8,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),50,20,25,58,39,0,0,0,
	55,12,8,20,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),40,30,10,59,40,0,0,0,
	60,15,4,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),30,15,30,60,41,0,0,0,
	80,12,6,14,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),80,30,20,112,93,0,0,0,
	70,18,8,17,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),60,20,25,112,93,0,0,0,
	78,10,3,30,1,(0),(0),(0),(0),(0),(0),0,0,(0),20,10,20,62,43,0,0,0,
	20,9,12,40,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,18,63,44,0,0,0,
	60,12,16,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),75,20,25,64,45,0,0,0,
	40,14,12,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10,15,20,65,46,0,0,0,
	95,12,10,5,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),100,8,30,66,47,0,0,0,
	80,10,5,15,1,(0),(0),(0),(0),(0),(0),(2),0,(0),10000,30,15,67,48,0,0,0,
	75,10,15,18,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,20,68,49,0,0,0,
	90,12,2,25,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),12,8,30,69,50,0,0,0,
	40,8,20,45,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),80,18,15,70,51,0,0,0,
	50,10,5,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),40,12,25,71,52,0,0,0,
	65,14,5,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,10,72,53,0,0,0,
	
	80,12,10,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),18,8,20,73,54,0,0,0,
	60,12,20,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,20,74,55,0,0,0,
	94,10,2,15,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,30,30,75,56,0,0,0,
	80,14,1,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,15,76,57,0,0,0,
	80,12,2,20,1,(0),(0),(0),(0),(0),(0),(2),0,(0),8,4,30,77,58,0,0,0,
	80,12,25,25,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),9,1,25,78,59,0,0,0,
	50,10,20,40,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10,10,25,79,60,0,0,0,
	20,7,18,50,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,20,80,61,0,0,0,
	40,10,12,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000000,100,15,81,62,0,0,0,
	60,12,5,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000000,1000,10,53,34,0,0,0,
	60,12,10,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),4,4,100,124,105,0,0,0,
	60,12,5,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000000,1000,30,53,34,0,0,0,
	60,12,5,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000000,1000,30,53,34,0,0,0,
	40,14,5,10,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),10,4,25,82,63,0,0,0,
	50,14,5,25,1,(0),(0),(0),(0),(0),(0),(2),0,(0),10,4,30,54,35,0,0,0,
	90,14,1,30,1,(0),(0),(0),(0),(0),(0),0,0,(0),10,4,30,84,65,0,0,0,
	90,20,1,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),6,2,20,85,66,0,0,0,
	30,10,20,5,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,30,86,67,0,0,0,
	30,10,8,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,15,87,68,0,0,0,
	60,10,16,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),75,20,20,88,69,0,0,0,
	
	50,7,13,35,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),200,50,15,89,70,0,0,0,
	70,6,1,20,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,30,0,45,27,0,0,0,
	50,10,8,45,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000,30,18,90,71,0,0,0,
	0,50,0,0,1,(1),(3),(0),(2),(3),(3),(1),(2),(0),10000,30,20,91,72,0,0,0,
	70,10,1,20,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),10000,30,20,92,73,0,0,0,
	85,10,0,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,35,93,74,0,0,0,
	80,10,5,25,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,30,35,94,75,0,0,0,
	70,10,1,15,1,(0),(0),(0),(0),(0),(0),0,0,(0),4,30,20,95,76,0,0,0,
	55,12,20,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),16,30,20,96,77,0,0,0,
	50,12,1,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),40,20,20,97,78,0,0,0,
	30,12,12,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),200,20,15,98,79,0,0,0,
	70,10,1,15,1,(0),(0),(0),(0),(0),(0),(2),0,(0),20,10,25,99,80,0,0,0,
	80,10,1,10,1,(0),(0),(0),(0),(0),(0),(2),0,(0),10,6,8,100,81,0,0,0,
	70,14,1,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),14,6,12,52,33,0,0,0,
	10,7,12,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,15,102,83,0,0,0,
	20,8,15,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,35,121,102,0,0,0,
	70,10,1,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,20,110,91,0,0,0,
	100,14,1,1,1,(0),(0),(0),(0),(0),(0),0,0,(0),4,3,20,105,86,0,0,0,
	70,10,10,20,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,8,15,104,85,0,0,0,
	73,10,15,20,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,30,0,45,27,0,0,0,
	
	77,10,1,30,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,30,0,45,27,0,0,0,
	70,12,10,20,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,30,5,104,85,0,0,0,
	60,10,15,25,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,30,20,107,88,0,0,0,
	30,10,12,25,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,25,20,61,42,0,0,0,
	20,8,8,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,15,103,84,0,0,0,
	90,8,10,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,30,25,106,87,0,0,0,
	75,12,10,25,1,(0),(0),(0),(0),(0),(0),(2),(1),(0),10000,30,20,111,92,0,0,0,
	20,8,1,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),12,12,15,101,82,0,0,0,
	20,8,1,30,1,(0),(0),(0),(0),(0),(0),(3),0,(0),12,12,30,113,94,0,0,0,
	50,12,20,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),2,2,35,114,95,0,0,0,
	90,15,1,15,1,(0),(0),(0),(0),(0),(0),(2),0,(0),4,3,35,115,96,0,0,0,
	10,12,20,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),44,22,25,116,97,0,0,0,
	45,8,15,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,22,117,98,0,0,0,
	80,30,10,20,1,(0),(0),(0),(0),(0),(0),(2),0,(0),8,5,30,118,99,0,0,0,
	45,6,18,35,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),100,18,25,119,100,0,0,0,
	70,8,8,20,1,(0),(0),(0),(0),(0),(0),(2),0,(0),50,12,25,120,101,0,0,0,
	100,30,15,40,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),6,4,15,56,37,0,0,0,
	100,8,0,20,1,(0),(0),(0),(0),(0),(0),0,0,(0),4,10,25,122,103,0,0,0,
	0,8,14,25,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),400000,100000,20,123,104,0,0,0,
	100,20,1,1,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),40,2,0,45,27,0,0,0,
	
	80,4,0,1,1,(0),(0),(0),(0),(0),(0),0,0,(0),25,10,0,45,27,0,0,0,
	1,18,200,100,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),25,10,0,45,27,0,0,0,
	50,40,0,20,1,(0),(0),(4),(0),(0),(0),(1),(2),(0),25,10,0,12,27,0,0,0,
	90,40,0,20,1,(0),(4),(4),(0),(0),(0),(1),(2),(0),25,10,0,12,27,0,0,0,
};

const uint[]AIGeneralMsg_=
{
	
	2000,2019,2020,2039,2040,2059,2060,2079,
	2100,2119,2120,2139,2140,2159,2160,2172,
	2200,2219,2220,2239,2240,2259,2260,2272,
	2400,2405,2420,2427,2440,2449,2460,2465,
	2300,2319,2320,2339,2340,2359,2360,2372,
	2500,2505,2520,2525,2540,2552,2560,2565,
	2600,2606,2620,2629,2640,2651,2660,2669,
	2700,2705,2720,2727,2740,2749,2760,2765,
	2900,2905,2920,2925,2940,2950,2960,2964,
	3000,3005,3020,3025,3040,3049,3060,3065,
	3100,3119,3120,3139,3140,3159,3160,3179,
	3200,3205,3220,3226,3240,3246,3260,3265,
	12000,12006,12020,12038,12040,12049,12060,12065,
	12100,12105,12120,12125,12140,12149,12160,12165,
	12200,12205,12220,12228,12240,12249,12260,12266,
	26000,26005,26020,26025,26040,26050,26060,26060,
	26100,26105,26120,26126,26140,26149,26160,26166,
	32100,32105,32120,32128,32140,32149,32160,32165,
	32200,32205,32220,32228,32240,32249,32260,32265,
	32300,32305,32320,32325,32340,32348,32360,32365,
	
	32400,32405,32420,32428,32440,32448,32460,32465,
	32500,32505,32520,32526,32540,32549,32560,32565,
	32600,32604,32620,32626,32640,32649,32660,32665,
	32800,32805,32820,32828,32840,32847,32860,32865,
	33000,33005,33020,33028,33040,33045,33060,33064,
	33100,33105,33120,33128,33140,33149,33160,33165,
	36100,36105,36120,36124,36140,36148,36160,36165,
	36200,36205,36220,36223,36240,36249,36260,36265,
	36300,36305,36320,36323,36340,36348,36360,36365,
	36400,36405,36420,36423,36440,36449,36460,36465,
	36500,36500,36520,36523,36540,36548,36560,36565,
	36700,36705,36720,36727,36740,36749,36760,36765,
	36800,36819,36820,36839,36840,36859,36860,36879,
	40100,40119,40120,40139,40140,40159,40160,40179,
	44100,44102,44120,44100,44140,44100,44160,44100,
	44500,44507,44520,44528,44540,44549,44560,44566,
	44900,44909,44920,44939,44940,44959,44960,44979,
	41300,41319,41320,41339,41340,41359,41360,41379,
	42100,42117,42120,42133,42140,42159,42160,42177,
	40900,40912,40920,40929,40940,40959,40960,40979,
	
	10000,10000,10020,10038,10040,10058,10060,10060,
	10100,10100,10120,10139,10140,10159,10160,10160,
	41700,41719,41720,41739,41740,41759,41760,41779,
	18100,18107,18120,18127,18140,18154,18160,18177,
	14000,14009,14020,14029,14040,14049,14060,14069,
	50100,50100,50120,50120,50140,50140,50160,50160,
	60000,60000,60020,60020,60040,60041,60060,60060,
	61900,61905,61920,61911,61940,61921,61960,61900,
	62100,62105,62120,62111,62140,62121,62160,62100,
	61000,61005,61020,61011,61040,61021,61060,61000,
	61800,61805,61820,61811,61840,61821,61860,61800,
	62000,62005,62020,62011,62040,62021,62060,62000,
	62200,62205,62220,62211,62240,62221,62260,62200,
	65000,65005,65020,65011,65040,65021,65060,65000,
	65200,65205,65220,65211,65240,65221,65260,65200,
	61700,61705,61720,61711,61740,61721,61760,61700,
	68300,68300,68320,68300,68340,68300,68360,68300,
	61100,61105,61120,61111,61140,61121,61160,61100,
	61200,61205,61220,61211,61240,61224,61260,61200,
	61300,61305,61320,61311,61340,61321,61360,61300,
	
	61400,61405,61420,61411,61440,61421,61460,61400,
	61500,61505,61520,61511,61540,61521,61560,61500,
	63000,63005,63020,63011,63040,63022,63060,63000,
	63100,63105,63120,63111,63140,63121,63160,63100,
	63200,63205,63220,63211,63240,63221,63260,63200,
	63300,63305,63320,63311,63340,63321,63360,63300,
	63400,63405,63420,63411,63440,63421,63460,63400,
	63500,63505,63520,63511,63540,63521,63560,63500,
	63600,63605,63620,63611,63640,63621,63660,63600,
	63700,63705,63720,63711,63740,63721,63760,63700,
	63800,63805,63820,63811,63840,63821,63860,63800,
	63900,63905,63920,63911,63940,63921,63960,63900,
	64000,64005,64020,64011,64040,64021,64060,64000,
	64100,64105,64120,64111,64140,64121,64160,64100,
	64200,64205,64220,64211,64240,64221,64260,64200,
	64300,64305,64320,64311,64340,64321,64360,64300,
	64400,64405,64420,64411,64440,64421,64460,64400,
	64500,64505,64520,64511,64540,64521,64560,64500,
	64600,64605,64620,64611,64640,64621,64660,64600,
	64700,64705,64720,64711,64740,64721,64760,64700,
	
	64800,64805,64820,64811,64840,64821,64860,64800,
	64900,64905,64920,64911,64940,64921,64960,64900,
	65100,65105,65120,65111,65140,65121,65160,65100,
	68700,68705,68720,68711,68740,68721,68760,68700,
	65300,65305,65320,65311,65340,65321,65360,65300,
	65400,65405,65420,65411,65440,65421,65460,65400,
	65500,65505,65520,65511,65540,65521,65560,65500,
	65600,65605,65620,65611,65640,65621,65660,65600,
	65700,65705,65720,65711,65740,65721,65760,65700,
	65800,65805,65820,65811,65840,65821,65860,65800,
	65900,65905,65920,65911,65940,65921,65960,65900,
	66000,66005,66020,66011,66040,66021,66060,66000,
	66100,66105,66120,66111,66140,66121,66160,66100,
	66200,66205,66220,66211,66240,66221,66260,66200,
	66300,66305,66320,66311,66340,66321,66360,66300,
	66400,66405,66420,66411,66440,66421,66460,66400,
	66500,66505,66520,66511,66540,66521,66560,66500,
	66600,66605,66620,66611,66640,66621,66660,66600,
	66700,66705,66720,66711,66740,66721,66760,66700,
	66800,66805,66820,66811,66840,66821,66860,66800,
	
	66900,66905,66920,66911,66940,66921,66960,66900,
	67000,67005,67020,67011,67040,67021,67060,67000,
	62300,62305,62320,62311,62340,62321,62360,62300,
	62400,62405,62420,62411,62440,62421,62460,62400,
	68000,68005,68020,68011,68040,68021,68060,68000,
	62600,62605,62620,62611,62640,62621,62660,62600,
	62700,62705,62720,62711,62740,62721,62760,62700,
	68100,68105,68120,68111,68140,68121,68160,68100,
	68200,68205,68220,68211,68240,68221,68260,68200,
	61600,61605,61620,61611,61640,61621,61660,61600,
	62500,62505,62520,62511,62540,62521,62560,62500,
	62800,62805,62820,62811,62840,62821,62860,62800,
	62900,62905,62920,62911,62940,62921,62960,62900,
	67100,67105,67120,67111,67140,67121,67160,67100,
	67200,67205,67220,67211,67240,67221,67260,67200,
	67300,67305,67320,67311,67340,67321,67360,67300,
	67400,67405,67420,67411,67440,67421,67460,67400,
	67500,67505,67520,67511,67540,67521,67560,67500,
	67600,67605,67620,67611,67640,67621,67660,67600,
	67700,67705,67720,67711,67740,67721,67760,67700,
	
	67800,67805,67820,67811,67840,67821,67860,67800,
	67900,67905,67920,67911,67940,67921,67960,67900,
	68400,68402,68420,68405,68440,68408,68460,68400,
	68500,68500,68520,68502,68540,68505,68560,68500,
	68600,68605,68620,68611,68640,68621,68660,68600
};

const uint[]AIBodyMsg_=
{
	
	1000,1009,1010,1019,1020,1029,1030,1059,1060,1069,1070,1079,1080,1089,1090,1099,
	1100,1109,1110,1119,1120,1129,1130,1159,1160,1169,1170,1179,1180,1189,1190,1199,
	1200,1209,1210,1219,1220,1229,1230,1259,1260,1269,1270,1279,1280,1289,1290,1299,
	0,0,10,0,20,0,30,0,60,0,70,0,80,0,90,0,
	1300,1309,1310,1319,1320,1329,1330,1359,1360,1369,1370,1379,1380,1389,1390,1399,
	0,0,10,0,20,0,30,0,60,0,70,0,80,0,90,0,
	1400,1402,1410,1412,1420,1422,1430,1439,1460,1462,1470,1472,1480,1482,1490,1492,
	1500,1509,1510,1519,1520,1529,1530,1559,1560,1569,1570,1579,1580,1589,1590,1599,
	1600,1609,1610,1619,1620,1629,1630,1639,1660,1669,1670,1679,1680,1689,1690,1699,
	1700,1709,1710,1712,1720,1722,1730,1735,1760,1763,1770,1773,1780,1783,1790,1796,
	1800,1804,1810,1813,1820,1823,1830,1837,1860,1862,1870,1872,1880,1882,1890,1898,
	12300,12303,12310,12312,12320,12322,12330,12335,12360,12363,12370,12373,12380,12382,12390,12396,
	32000,32002,32010,32012,32020,32022,32030,32036,32060,32062,32070,32072,32080,32082,32090,32095,
	32700,32702,32710,32712,32720,32722,32730,32736,32760,32762,32770,32772,32780,32782,32790,32795,
	33200,33202,33210,33212,33220,33222,33230,33236,33260,33262,33270,33272,33280,33282,33290,33295,
	36000,36002,36010,36012,36020,36022,36030,36035,36060,36062,36070,36072,36080,36082,36090,36095,
	36600,36602,36610,36612,36620,36622,36630,36645,36660,36662,36670,36672,36680,36682,36690,36695,
	40000,40009,40010,40019,40020,40029,40030,40059,40060,40069,40070,40079,40080,40089,40090,40099,
	44000,44000,44010,44010,44020,44020,44030,44030,44060,44060,44070,44070,44080,44080,44090,44090,
	44400,44408,44410,44413,44420,44423,44430,44439,44460,44463,44470,44473,44480,44483,44490,44492,
	
	44800,44804,44810,44814,44820,44824,44830,44849,44860,44864,44870,44874,44880,44884,44890,44894,
	41200,41209,41210,41219,41220,41229,41230,41259,41260,41269,41270,41279,41280,41289,41290,41299,
	12400,12409,12410,12419,12420,12429,12430,12459,12460,12469,12470,12479,12480,12489,12490,12499,
	42000,42009,42010,42017,42020,42027,42030,42058,42060,42068,42070,42078,42080,42089,42090,42099,
	40800,40807,40810,40818,40820,40828,40830,40859,40860,40867,40870,40877,40880,40886,40890,40899,
	41600,41609,41610,41619,41620,41629,41630,41659,41660,41669,41670,41679,41680,41689,41690,41699,
	18000,18002,18010,18011,18020,18021,18030,18035,18060,18061,18070,18071,18080,18082,18090,18092,
	50000,50000,50010,50010,50020,50020,50030,50030,50060,50060,50070,50070,50080,50080,50090,50090,
	61928,61930,61938,61933,61948,61936,61958,61943,61988,61946,61998,61949,62008,61952,62018,61957,
	62128,62130,62138,62133,62148,62136,62158,62136,62188,62139,62198,62142,62208,62145,62218,62150,
	61028,61030,61038,61033,61048,61036,61058,61040,61088,61043,61098,61046,61108,61049,61118,61054,
	61828,61830,61838,61833,61848,61836,61858,61843,61888,61846,61898,61849,61908,61852,61918,61857,
	62028,62030,62038,62033,62048,62036,62058,62043,62088,62046,62098,62049,62108,62052,62118,62057,
	62228,62230,62238,62233,62248,62236,62258,62243,62288,62246,62298,62249,62308,62252,62318,62257,
	65028,65030,65038,65033,65048,65036,65058,65046,65088,65049,65098,65052,65108,65055,65118,65060,
	65228,65230,65238,65233,65248,65236,65258,65246,65288,65249,65298,65252,65308,65255,65318,65260,
	61728,61730,61738,61733,61748,61736,61758,61736,61788,61739,61798,61742,61808,61745,61818,61750,
	68302,68301,68312,68301,68322,68301,68332,68302,68362,68302,68372,68302,68382,68302,68392,68302,
	61128,61130,61138,61133,61148,61136,61158,61140,61188,61143,61198,61146,61208,61149,61218,61154,
	61231,61233,61241,61236,61251,61239,61261,61242,61291,61245,61301,61248,61311,61251,61321,61256,
	
	61328,61330,61338,61333,61348,61337,61358,61343,61388,61346,61398,61349,61408,61352,61418,61357,
	61428,61430,61438,61433,61448,61436,61458,61442,61488,61445,61498,61448,61508,61451,61518,61456,
	61528,61530,61538,61533,61548,61536,61558,61543,61588,61546,61598,61549,61608,61552,61618,61557,
	63028,63030,63038,63033,63048,63036,63058,63046,63088,63049,63098,63052,63108,63055,63118,63060,
	63128,63130,63138,63133,63148,63136,63158,63146,63188,63149,63198,63152,63208,63155,63218,63160,
	63228,63230,63238,63233,63248,63236,63258,63246,63288,63249,63298,63252,63308,63255,63318,63260,
	63328,63330,63338,63333,63348,63336,63358,63346,63388,63349,63398,63352,63408,63355,63418,63360,
	63428,63430,63438,63433,63448,63436,63458,63446,63488,63449,63498,63452,63508,63455,63518,63460,
	63528,63530,63538,63533,63548,63536,63558,63546,63588,63549,63598,63552,63608,63555,63618,63560,
	63628,63630,63638,63633,63648,63636,63658,63646,63688,63649,63698,63652,63708,63655,63718,63660,
	63728,63730,63738,63733,63748,63736,63758,63746,63788,63749,63798,63752,63808,63755,63818,63760,
	63828,63830,63838,63833,63848,63836,63858,63836,63888,63839,63898,63842,63908,63845,63918,63850,
	63928,63930,63938,63933,63948,63936,63958,63946,63988,63949,63998,63952,64008,63955,64018,63960,
	64028,64030,64038,64033,64048,64036,64058,64046,64088,64049,64098,64052,64108,64055,64118,64060,
	64128,64130,64138,64133,64148,64136,64158,64146,64188,64149,64198,64152,64208,64155,64218,64160,
	64228,64230,64238,64233,64248,64236,64258,64246,64288,64249,64298,64252,64308,64255,64318,64260,
	64328,64330,64338,64333,64348,64336,64358,64346,64388,64349,64398,64352,64408,64355,64418,64360,
	64428,64430,64438,64433,64448,64436,64458,64446,64488,64449,64498,64452,64508,64455,64518,64460,
	64528,64530,64538,64533,64548,64536,64558,64546,64588,64549,64598,64552,64608,64555,64618,64560,
	64628,64630,64638,64633,64648,64636,64658,64646,64688,64649,64698,64652,64708,64655,64718,64660,
	
	64728,64730,64738,64733,64748,64736,64758,64746,64788,64749,64798,64752,64808,64755,64818,64760,
	64828,64830,64838,64833,64848,64836,64858,64846,64888,64849,64898,64852,64908,64855,64918,64860,
	64928,64930,64938,64933,64948,64936,64958,64946,64988,64949,64998,64952,65008,64955,65018,64960,
	65128,65130,65138,65133,65148,65136,65158,65146,65188,65149,65198,65152,65208,65155,65218,65160,
	68728,68730,68738,68733,68748,68736,68758,68746,68788,68749,68798,68752,68808,68755,68818,68760,
	65328,65330,65338,65333,65348,65336,65358,65346,65388,65349,65398,65352,65408,65355,65418,65360,
	65428,65430,65438,65433,65448,65436,65458,65446,65488,65449,65498,65452,65508,65455,65518,65460,
	65528,65530,65538,65533,65548,65536,65558,65546,65588,65549,65598,65552,65608,65555,65618,65560,
	65628,65630,65638,65633,65648,65636,65658,65646,65688,65649,65698,65652,65708,65655,65718,65660,
	65728,65730,65738,65733,65748,65736,65758,65746,65788,65749,65798,65752,65808,65755,65818,65760,
	65828,65830,65838,65833,65848,65836,65858,65846,65888,65849,65898,65852,65908,65855,65918,65860,
	65928,65930,65938,65933,65948,65936,65958,65946,65988,65949,65998,65952,66008,65955,66018,65960,
	66028,66030,66038,66033,66048,66036,66058,66046,66088,66049,66098,66052,66108,66055,66118,66060,
	66128,66130,66138,66133,66148,66136,66158,66146,66188,66149,66198,66152,66208,66155,66218,66160,
	66228,66230,66238,66233,66248,66236,66258,66246,66288,66249,66298,66252,66308,66255,66318,66260,
	66328,66330,66338,66333,66348,66336,66358,66346,66388,66349,66398,66352,66408,66355,66418,66360,
	66428,66430,66438,66433,66448,66436,66458,66446,66488,66449,66498,66452,66508,66455,66518,66460,
	66528,66530,66538,66533,66548,66536,66558,66546,66588,66549,66598,66552,66608,66555,66618,66560,
	66628,66630,66638,66633,66648,66636,66658,66646,66688,66649,66698,66652,66708,66655,66718,66660,
	66728,66730,66738,66733,66748,66736,66758,66746,66788,66749,66798,66752,66808,66755,66818,66760,
	
	66828,66830,66838,66833,66848,66836,66858,66846,66888,66849,66898,66852,66908,66855,66918,66860,
	66928,66930,66938,66933,66948,66936,66958,66946,66988,66949,66998,66952,67008,66955,67018,66960,
	67028,67030,67038,67033,67048,67036,67058,67046,67088,67049,67098,67052,67108,67055,67118,67060,
	62328,62330,62338,62333,62348,62336,62358,62342,62388,62345,62398,62348,62408,62351,62418,62356,
	62428,62430,62438,62433,62448,62436,62458,62441,62488,62444,62498,62447,62508,62450,62518,62455,
	68028,68030,68038,68033,68048,68036,68058,68046,68088,68049,68098,68052,68108,68055,68118,68060,
	62628,62630,62638,62633,62648,62636,62658,62636,62688,62639,62698,62642,62708,62645,62718,62650,
	62728,62730,62738,62730,62748,62730,62758,62735,62788,62735,62798,62735,62808,62735,62818,62737,
	68128,68130,68138,68133,68148,68136,68158,68146,68188,68149,68198,68152,68208,68155,68218,68157,
	68228,68230,68238,68233,68248,68236,68258,68246,68288,68249,68298,68252,68308,68255,68318,68260,
	61628,61630,61638,61633,61648,61636,61658,61644,61688,61647,61698,61650,61708,61653,61718,61658,
	62528,62530,62538,62533,62548,62536,62558,62542,62588,62545,62598,62548,62608,62551,62618,62556,
	62828,62830,62838,62833,62848,62836,62858,62844,62888,62847,62898,62850,62908,62853,62918,62858,
	62928,62930,62938,62933,62948,62936,62958,62946,62988,62949,62998,62952,63008,62955,63018,62960,
	67128,67130,67138,67133,67148,67136,67158,67146,67188,67149,67198,67152,67208,67155,67218,67160,
	67228,67230,67238,67233,67248,67236,67258,67246,67288,67249,67298,67252,67308,67255,67318,67260,
	67328,67330,67338,67333,67348,67336,67358,67346,67388,67349,67398,67352,67408,67355,67418,67360,
	67428,67430,67438,67433,67448,67436,67458,67446,67488,67449,67498,67452,67508,67455,67518,67460,
	67528,67530,67538,67533,67548,67536,67558,67546,67588,67549,67598,67552,67608,67555,67618,67560,
	67628,67630,67638,67633,67648,67636,67658,67646,67688,67649,67698,67652,67708,67655,67718,67660,
	
	67728,67730,67738,67733,67748,67736,67758,67746,67788,67749,67798,67752,67808,67755,67818,67760,
	67828,67830,67838,67833,67848,67836,67858,67846,67888,67849,67898,67852,67908,67855,67918,67860,
	67928,67930,67938,67933,67948,67936,67958,67946,67988,67949,67998,67952,68008,67955,68018,67960,
	68411,68412,68421,68414,68431,68416,68441,68420,68471,68422,68481,68424,68491,68426,68501,68426,
	68508,68511,68518,68513,68528,68515,68538,68518,68568,68520,68578,68522,68588,68524,68598,68526,
	68628,68630,68638,68633,68648,68636,68658,68646,68688,68649,68698,68652,68708,68655,68718,68660
};                                                                                                                                     

void _Idle(Critter&critter)
{
	actionManager.Idle(critter);
}

void _Finish(Critter&critter,bool deleted)
{
	actionManager.Finish(critter,deleted);
}

int _PlaneBegin(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	return actionManager.PlaneBegin(critter,plane,reason,someCr,someItem);
}

int _PlaneRun(Critter&critter,NpcPlane&plane,int reason,uint&result0,uint&result1,uint&result2)
{
	return actionManager.PlaneRun(critter,plane,reason,result0,result1,result2);
}

int _PlaneEnd(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	return actionManager.PlaneEnd(critter,plane,reason,someCr,someItem);
}

void _SeeSomeoneAttack(Critter&critter,Critter&attacker,Critter&attacked)
{
	actionManager.SeeSomeoneAttack(critter,attacker,attacked);
}

void _SeeSomeoneDead(Critter&critter,Critter&killed,Critter@killer)
{
	actionManager.SeeSomeoneDead(critter,killed,killer);
}

void _SeeSomeoneAttacked(Critter&critter,Critter&attacked,Critter&attacker)
{
	actionManager.SeeSomeoneAttacked(critter,attacked,attacker);
}

void _SeeSomeoneStealing(Critter&critter,Critter&victim,Critter&thief,bool success,Item&item,uint count)
{
	actionManager.SeeSomeoneStealing(critter,victim,thief,success,item,count);
}

void _ShowCritter(Critter&critter,Critter&showCritter)
{
	actionManager.ShowCritter(critter,showCritter);
}

void _HideCritter(Critter&critter,Critter&hideCritter)
{
	actionManager.HideCritter(critter,hideCritter);
}

bool _Attack(Critter&critter,Critter&target)
{
	return actionManager.Attack(critter,target);
}

bool _Attacked(Critter&critter,Critter&attacker)
{
	return actionManager.Attacked(critter,attacker);
}

void _Dead(Critter&critter,Critter@killer)
{
	actionManager.Dead(critter,killer);
}

void _Message(Critter&critter,Critter&messenger,int message,int value)
{
	actionManager.Message(critter,messenger,message,value);
}

void _Respawn(Critter&critter)
{
	actionManager.Respawn(critter);
}

void _SeeSomeoneUseSkill(Critter&critter,Critter&skillCritter,int skill,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	actionManager.SeeSomeoneUseSkill(critter,skillCritter,skill,onCritter,onItem,onScenery);
}              

int FindInArray(int[]&arr,int value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(int[]&arr,int id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint[]&arr,uint value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint[]&arr,uint id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint16[]&arr,uint16 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}  

int FindInArray(uint8[]&arr,uint8 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint8[]&arr,uint8 id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

bool Present(int what,int[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint what,uint[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint16 what,uint16[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

void MergeArrays(uint16[]&arrayTo,uint16[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
	}
}

void MergeArrays(int[]&arrayTo,int[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
		arrayTo.insertLast(arrayFrom[i]);
	}
}

bool RemoveFromArray(uint[]&arrayFrom,uint value)
{
	for(uint i=0;i<arrayFrom.length();i++)
	if(arrayFrom[i]==value)
	{
		arrayFrom.removeAt(i);
		return true;
	}
	return false;
}

bool RemoveFromArray(uint16[]&arrayFrom,uint16 value)
{
	for(uint i=0;i<arrayFrom.length();i++)
	if(arrayFrom[i]==value)
	{
		arrayFrom.removeAt(i);
		return true;
	}
	return false;
} 

bool RemoveCritter(Critter@[]@critters,Critter&critter)
{
	for(uint i=0;i<critters.length();i++)
	{
		if(critters[i].Id==critter.Id)
		{
			critters.removeAt(i);
			return true;
		}
	}
	return false;
}   

ActionManager actionManager;
class ActionManager
{      
	
	dictionary runningActions;
	dictionary queuedActions;
	
	void Start(Critter&critter,Action&action)
	{
		InitCritterEvents(critter);
		queuedActions.set(""+critter.Id,@action);
	}
	
	void StartImmediately(Critter&critter,Action&action)
	{
		InitCritterEvents(critter);
		runningActions.set(""+critter.Id,@action);
		action.Start(critter);
	}
	
	private void InitCritterEvents(Critter&critter)
	{
		critter.SetEvent((15),"_Attack");
		critter.SetEvent((16),"_Attacked");
		critter.SetEvent((2),"_Dead");
		critter.SetEvent((1),"_Finish");
		critter.SetEvent((4),"_ShowCritter");
		critter.SetEvent((8),"_HideCritter");
		critter.SetEvent((0),"_Idle");
		critter.SetEvent((18),"_Message");
		critter.SetEvent((3),"_Respawn");
		critter.SetEvent((28),"_SeeSomeoneAttack");
		critter.SetEvent((29),"_SeeSomeoneAttacked");
		critter.SetEvent((26),"_SeeSomeoneDead"); 
		
		critter.SetEvent((27),"_SeeSomeoneStealing");
		
		critter.SetEvent((31),"_SeeSomeoneUseSkill");
		critter.SetEvent((35),"_PlaneBegin");
		critter.SetEvent((37),"_PlaneRun");
		critter.SetEvent((36),"_PlaneEnd");
		
	}
	
	Action@[]GetListeningActions(Critter&critter)
	{
		Action@[]listeningActions;
		Action@action;
		
		runningActions.get(""+critter.Id,@action);   
		
		Info("Collecting listening actions for critter: "+critter.Id);
		if((@action!=null))
		{
			
			action.CollectListeningActions(listeningActions);  
			
		}      
		
		return listeningActions;
	}
	
	void Idle(Critter&critter)
	{
		Info("Critter idle.");
		
		Action@[]actions=GetListeningActions(critter);
		
		for(uint i=0;i<actions.length();i++)
		actions[i].IdleEvent(critter);   
		
		StartQueuedAction(critter);
	}
	
	private void StartQueuedAction(Critter&critter)
	{
		Action@action;
		queuedActions.get(""+critter.Id,@action);
		queuedActions.delete(""+critter.Id);
		if((@action!=null))
		{
			Info("Found queued valid action: starting...");
			runningActions.set(""+critter.Id,@action);
			action.Start(critter);
		}
	}
	
	void Finish(Critter&critter,bool deleted)
	{
		if(!deleted)
		return;
		
		Info("Removing critter actions...");
		queuedActions.delete(""+critter.Id);
		Action@action;
		
		runningActions.get(""+critter.Id,@action);
		if((@action!=null))
		action.Cancel(critter);
		runningActions.delete(""+critter.Id);
	}
	
	void ShowCritter(Critter&critter,Critter&showCritter)
	{
		if(critter.IsDead())
		return;
		Action@[]actions=GetListeningActions(critter);
		
		for(uint i=0;i<actions.length();i++)
		actions[i].ShowCritterEvent(critter,showCritter);  
		
	}
	
	void HideCritter(Critter&critter,Critter&hideCritter)
	{
		if(critter.IsDead())
		return;
		Action@[]actions=GetListeningActions(critter);
		
		for(uint i=0;i<actions.length();i++)
		actions[i].HideCritterEvent(critter,hideCritter);  
		
	}
	
	bool Attack(Critter&critter,Critter&target)
	{
		if(critter.IsDead())
		return false;
		bool result=false;
		Action@[]actions=GetListeningActions(critter);
		
		for(uint i=0;i<actions.length();i++)
		result=actions[i].AttackEvent(critter,target)||result;  
		
		return result;
	}
	
	bool Attacked(Critter&critter,Critter&attacker)
	{
		if(critter.IsDead())
		return false;
		bool result=false;
		Action@[]actions=GetListeningActions(critter);
		
		for(uint i=0;i<actions.length();i++)
		result=actions[i].AttackedEvent(critter,attacker)||result;  
		
		return result;
	}
	
	void Dead(Critter&critter,Critter@killer)
	{
		Action@[]actions=GetListeningActions(critter);
		for(uint i=0;i<actions.length();i++)
		actions[i].DeadEvent(critter,killer);
	}
	
	void Message(Critter&critter,Critter&messenger,int message,int value)
	{
		if(critter.IsDead())
		return;
		Action@[]actions=GetListeningActions(critter);
		
		for(uint i=0;i<actions.length();i++)
		actions[i].MessageEvent(critter,messenger,message,value);  
		
	}
	
	void SeeSomeoneAttack(Critter&critter,Critter&attacker,Critter&attacked)
	{
		if(critter.IsDead())
		return;
		Action@[]actions=GetListeningActions(critter);
		
		for(uint i=0;i<actions.length();i++)
		actions[i].SeeSomeoneAttackEvent(critter,attacker,attacked);  
		
	}
	
	void SeeSomeoneAttacked(Critter&critter,Critter&attacked,Critter&attacker)
	{
		if(critter.IsDead())
		return;
		Action@[]actions=GetListeningActions(critter);
		
		for(uint i=0;i<actions.length();i++)
		actions[i].SeeSomeoneAttackedEvent(critter,attacked,attacker);  
		
	}
	
	void SeeSomeoneDead(Critter&critter,Critter&killed,Critter@killer)
	{
		if(critter.IsDead())
		return;
		Action@[]actions=GetListeningActions(critter);
		for(uint i=0;i<actions.length();i++)
		actions[i].SeeSomeoneDeadEvent(critter,killed,killer);
	}
	
	void SeeSomeoneStealing(Critter&critter,Critter&victim,Critter&thief,bool success,Item&item,uint count)
	{
		if(critter.IsDead())
		return;
		Action@[]actions=GetListeningActions(critter);
		for(uint i=0;i<actions.length();i++)
		actions[i].SeeSomeoneStealingEvent(critter,victim,thief,success,item,count);
	}
	
	void SeeSomeoneUseSkill(Critter&critter,Critter&skillCritter,int skill,Critter@onCritter,Item@onItem,Scenery@onScenery)
	{
		if(critter.IsDead())
		return;
		Action@[]actions=GetListeningActions(critter);
		for(uint i=0;i<actions.length();i++)
		actions[i].SeeSomeoneUseSkill(critter,skillCritter,skill,onCritter,onItem,onScenery);
	}
	
	int PlaneBegin(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
	{
		if(critter.IsDead())
		return(0);
		Action@[]actions=GetListeningActions(critter);
		int result=(0);
		
		for(uint i=0;i<actions.length();i++)
		{
			int actionResult=actions[i].PlaneBeginEvent(critter,plane,reason,someCr,someItem);
			if(actionResult!=(0))
			result=actionResult;
		}  
		
		return result;
	}
	
	int PlaneRun(Critter&critter,NpcPlane&plane,int reason,uint&result0,uint&result1,uint&result2)
	{
		if(critter.IsDead())
		return(0);
		
		Action@[]actions=GetListeningActions(critter);
		int result=(0);
		
		for(uint i=0;i<actions.length();i++)
		{
			int actionResult=actions[i].PlaneRunEvent(critter,plane,reason,result0,result1,result2);
			if(actionResult!=(0))
			result=actionResult;
		}  
		
		return result;
	}
	
	int PlaneEnd(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
	{
		Info("Plane ended: "+critter.Id+", reason="+reason);
		if(critter.IsDead())
		return(0);
		Action@[]actions=GetListeningActions(critter);
		int result=(0);
		
		for(uint i=0;i<actions.length();i++)
		{
			int actionResult=actions[i].PlaneEndEvent(critter,plane,reason,someCr,someItem);
			if(actionResult!=(0))
			result=actionResult;
		}  
		
		return result;
	}
	
	void Respawn(Critter&critter)
	{
		Info("Respawing...");
		Action@action;
		runningActions.get(""+critter.Id,@action);
		
		if((@action!=null))
		{
			action.Cancel(critter);
			Start(critter,action);
		} 
		
	}
}

interface Action
{
	Action@GetSuperAction();
	void SetSuperAction(Action@action);
	Action@AddSubAction(Action@action);
	Action@[]GetSubActions();
	void CollectListeningActions(Action@[]&collection);
	Action@And(Action@andAction);
	Action@If(Condition@condition);
	Action@IfNot(Condition@condition);
	void PerformAndAction(Critter&critter,Critter@otherCritter,Item@item);
	bool Check(Critter&critter,Critter@otherCritter,Item@item);
	
	bool IsRunning();
	void SetRunning(bool running);
	bool IsListening();
	void SetListening(bool listening);
	
	bool Start(Critter&critter);
	void Perform(Critter&critter);
	void Finish(Critter&critter);
	void Cancel(Critter&critter);
	void StartNextAction(Critter&critter);
	
	string GetInfo();
	
	void IdleEvent(Critter&critter);
	void ShowCritterEvent(Critter&critter,Critter&showCritter);
	void HideCritterEvent(Critter&critter,Critter&hideCritter);
	bool AttackEvent(Critter&critter,Critter&target);
	bool AttackedEvent(Critter&critter,Critter&attacker);
	void DeadEvent(Critter&critter,Critter@killer);
	void MessageEvent(Critter&critter,Critter&messenger,int message,int value);
	void SeeSomeoneAttackEvent(Critter&critter,Critter&attacker,Critter&attacked);
	void SeeSomeoneDeadEvent(Critter&critter,Critter&killed,Critter@killer);
	void SeeSomeoneAttackedEvent(Critter&critter,Critter&attacked,Critter&attacker);
	void SeeSomeoneStealingEvent(Critter&critter,Critter&victim,Critter&thief,bool success,Item&item,uint count);
	void SeeSomeoneUseSkill(Critter&critter,Critter&skillCritter,int skill,Critter@onCritter,Item@onItem,Scenery@onScenery);
	int PlaneBeginEvent(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem);
	int PlaneRunEvent(Critter&critter,NpcPlane&plane,int reason,uint&result0,uint&result1,uint&result2);
	int PlaneEndEvent(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem);
}

class DefaultAction:Action
{
	Action@SuperAction;
	Action@[]SubActions;
	Action@AndAction;
	
	Condition@[]Conditions;
	Condition@[]NegativeConditions;
	
	float Chance;
	
	private bool Running;
	private bool Listening;
	private bool BlockingSubActions;
	
	private int CurrentActionIndex;
	
	DefaultAction()
	{
		Running=false;
		Listening=false;
		BlockingSubActions=false;
		Chance=101;
	}
	
	Action@GetSuperAction(){return@SuperAction;}
	void SetSuperAction(Action@action){@SuperAction=@action;}
	
	Action@AddSubAction(Action@action)
	{
		action.SetSuperAction(this);
		SubActions.insertLast(action);
		return@this;
	}
	Action@[]GetSubActions(){return SubActions;}
	
	void CollectListeningActions(Action@[]&collection)
	{
		if(IsListening())
		collection.insertLast(this);
		if(!IsRunning())
		return;
		
		for(uint i=0;i<SubActions.length();i++)
		SubActions[i].CollectListeningActions(collection);
	}
	
	Action@WithChance(float chance)
	{
		Chance=chance;
		return@this;
	}
	
	Action@And(Action@andAction)
	{
		@AndAction=andAction;
		return@this;
	}
	
	Action@If(Condition@condition)
	{
		Conditions.insertLast(condition);
		return@this;
	}
	
	Action@IfNot(Condition@condition)
	{
		NegativeConditions.insertLast(condition);
		return@this;
	}
	
	bool IsRunning(){return Running;}
	void SetRunning(bool running){Running=running;}
	
	bool IsListening(){return Listening;}
	void SetListening(bool listening){Listening=listening;}
	
	void BlockSubActions(){BlockingSubActions=true;}
	void UnblockSubActions(){BlockingSubActions=false;}
	
	bool Start(Critter&critter)final
	{
		if(!((float(Random(1,10000))/100.0f)<=Chance))
		{
			Info("No chance for action: "+GetInfo()+", chance="+Chance);
			StartNextSuperAction(critter);
			return false;
		}
		
		Info("Action starting: "+GetInfo());
		CurrentActionIndex=-1;
		SetRunning(true);
		Perform(critter);
		return true;
	}
	
	void Perform(Critter&critter){Finish(critter);}
	
	void Finish(Critter&critter)final
	{
		Info("Action finishing: "+GetInfo());
		StartNextAction(critter);
	}
	
	void StartNextAction(Critter&critter)
	{
		if(!BlockingSubActions&&StartNextSubAction(critter))
		return;
		
		StartNextSuperAction(critter);
	}
	
	bool StartNextSubAction(Critter&critter)
	{
		CurrentActionIndex++;
		Info("Trying to start sub action with index: "+CurrentActionIndex+", "+SubActions.length());
		if(CurrentActionIndex>=int(SubActions.length()))
		return false;
		
		Info("Starting next sub action: "+SubActions[CurrentActionIndex].GetInfo());
		SubActions[CurrentActionIndex].Start(critter);
		return true;
	}
	
	void StartNextSuperAction(Critter&critter)
	{
		SetRunning(false);
		if((@SuperAction!=null))
		{
			Info("Sending to super action: "+SuperAction.GetInfo());
			SuperAction.StartNextAction(critter);
		}
	}
	
	void Cancel(Critter&critter)
	{
		SetRunning(false);
		for(uint i=0;i<SubActions.length();i++)
		{
			SubActions[i].Cancel(critter);
		}
	}
	
	void PerformAndAction(Critter&critter,Critter@otherCritter,Item@item)final
	{
		if(!(@AndAction!=null)||!AndAction.Check(critter,otherCritter,item))
		return;
		
		AndAction.Start(critter);
	}
	
	bool Check(Critter&critter,Critter@otherCritter,Item@item)final
	{
		for(uint i=0;i<Conditions.length();i++)
		if(!Conditions[i].Check(critter,otherCritter,item))
		return false;
		
		for(uint i=0;i<NegativeConditions.length();i++)
		if(NegativeConditions[i].Check(critter,otherCritter,item))
		return false;
		
		return true;
	}
	
	string GetInfo(){return"DefaultAction";} 
	
	void IdleEvent(Critter&critter){}
	void ShowCritterEvent(Critter&critter,Critter&showCritter){}
	void HideCritterEvent(Critter&critter,Critter&hideCritter){}
	bool AttackEvent(Critter&critter,Critter&target){return false;}
	bool AttackedEvent(Critter&critter,Critter&attacker){return false;}
	void DeadEvent(Critter&critter,Critter@killer){}
	void MessageEvent(Critter&critter,Critter&messenger,int message,int value){}
	void SeeSomeoneAttackEvent(Critter&critter,Critter&attacker,Critter&attacked){}
	void SeeSomeoneDeadEvent(Critter&critter,Critter&killed,Critter@killer){}
	void SeeSomeoneAttackedEvent(Critter&critter,Critter&attacked,Critter&attacker){}
	void SeeSomeoneStealingEvent(Critter&critter,Critter&victim,Critter&thief,bool success,Item&item,uint count){}
	void SeeSomeoneUseSkill(Critter&critter,Critter&skillCritter,int skill,Critter@onCritter,Item@onItem,Scenery@onScenery){}
	int PlaneBeginEvent(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem){return(0);}
	int PlaneRunEvent(Critter&critter,NpcPlane&plane,int reason,uint&result0,uint&result1,uint&result2){return(0);}
	int PlaneEndEvent(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem){return(0);}
}

class Say:DefaultAction
{
	private uint8 HowSay;
	private uint16 TextMsg;
	private uint StringNum;
	private string@Message;
	private string@Lexems;
	private LexemGetterFunction@GetLexems;
	
	Say(string@message)
	{
		HowSay=(2);
		@Message=message;
		@Lexems=null;
	}
	
	Say(uint8 howSay,string@message)
	{
		HowSay=howSay;
		@Message=message;
		@Lexems=null;
	}
	
	Say(uint16 textMsg,uint stringNum)
	{
		HowSay=(2);
		TextMsg=textMsg;
		StringNum=stringNum;
		@Message=null;
		@Lexems=null;
	}
	
	Say(uint8 howSay,uint16 textMsg,uint stringNum)
	{
		HowSay=howSay;
		TextMsg=textMsg;
		StringNum=stringNum;
		@Message=null;
		@Lexems=null;
	}
	
	Say(uint8 howSay,uint16 textMsg,uint stringNum,string lexems)
	{
		HowSay=howSay;
		TextMsg=textMsg;
		StringNum=stringNum;
		@Message=null;
		@Lexems=lexems;
	}
	
	Say(uint8 howSay,uint16 textMsg,uint stringNum,LexemGetterFunction&getLexems)
	{
		HowSay=howSay;
		TextMsg=textMsg;
		StringNum=stringNum;
		@Message=null;
		@Lexems=null;
		@GetLexems=getLexems;
	}
	
	void Perform(Critter&critter)override
	{
		if(critter.IsDead()||critter.IsKnockout())
		{
			Finish(critter);
			return;
		}
		
		if(!Check(critter,null,null))
		{
			Finish(critter);
			return;
		}
		if((@Message!=null))
		critter.Say(HowSay,Message);
		else if((@Lexems!=null))
		critter.SayMsg(HowSay,TextMsg,StringNum,Lexems);
		else if((@GetLexems!=null))
		{
			string@lexems=GetLexems(critter,null);
			if((@lexems!=null))
			critter.SayMsg(HowSay,TextMsg,StringNum,lexems);
			else
			critter.SayMsg(HowSay,TextMsg,StringNum);
		}
		else
		critter.SayMsg(HowSay,TextMsg,StringNum);
		Finish(critter);
	}
	
	string GetInfo(){return"Say";}
}

class RunningAction:DefaultAction
{
	bool IsRunning()override{return true;}
}

class ListeningAction:DefaultAction
{
	bool IsListening()override{return true;}
}

class ChooseRandom:DefaultAction
{
	private bool Processed;
	
	void Perform(Critter&critter)override
	{
		Processed=false;
		Finish(critter);
	}
	
	bool StartNextSubAction(Critter&critter)override
	{
		if(SubActions.length()==0||Processed)
		return false;
		
		Processed=true;
		SubActions[Random(0,SubActions.length()-1)].Start(critter);
		return true;
	}
}

class ChooseOnlyOne:DefaultAction
{
	private bool Processed;
	
	void Perform(Critter&critter)override
	{
		Processed=false;
		Finish(critter);
	}
	
	bool StartNextSubAction(Critter&critter)override
	{
		CurrentActionIndex++;
		if(CurrentActionIndex>=int(SubActions.length())||Processed)
		return false;
		
		if(SubActions[CurrentActionIndex].Start(critter))
		Processed=true;
		return true;
	}
}

class LoopAction:CrittersHolderAction
{ 
	
	private uint CurrentLoop;
	private uint LoopCount;
	private bool OnlyIfPlayerOnMap;
	private bool LoopRunning;
	
	LoopAction()
	{
		LoopCount=(0);
		CurrentLoop=0;
		OnlyIfPlayerOnMap=false;
		LoopRunning=true;
	}
	
	LoopAction(bool onlyIfPlayerOnMap)
	{
		LoopCount=(0);
		CurrentLoop=0;
		OnlyIfPlayerOnMap=onlyIfPlayerOnMap;
		LoopRunning=true;
	}
	
	LoopAction(uint loopCount)
	{
		LoopCount=loopCount;
		CurrentLoop=0;
		OnlyIfPlayerOnMap=false;
		LoopRunning=true;
	}
	
	void Perform(Critter&critter)override
	{
		SetListening(true);
		CrittersHolderAction::Perform(critter);
	}
	
	bool IsRunning()
	{
		if(LoopCount==(0))
		return LoopRunning;
		else if(LoopCount>CurrentLoop)
		return true;
		else
		return false;
	}
	
	void IdleEvent(Critter&critter)override
	{
		Info("CurrentActionIndex = "+CurrentActionIndex+", SubActions: "+SubActions.length());
		if(CurrentActionIndex>=int(SubActions.length())
		&&(LoopCount==(0)))
		{
			if(OnlyIfPlayerOnMap&&NoPlayersFound(critter))
			{
				LoopRunning=false;
				return;
			}
			else
			{
				LoopRunning=true;
			}
			Info("Starting loop number: "+CurrentLoop);
			Start(critter);
		}
	}
	
	private bool NoPlayersFound(Critter&critter)
	{
		Map@map=critter.GetMap();
		if(!(@map!=null))
		return true;
		
		return map.GetCritters(0,(0x0F)|(0x10),null)==0;
	}
	
	void StartNextSuperAction(Critter&critter)override
	{
		if(LoopCount!=(0)&&++CurrentLoop>=LoopCount)
		{
			SetListening(false);
			SetRunning(false);
			if((@SuperAction!=null))
			{
				CurrentLoop=0;
				SuperAction.StartNextAction(critter);
			}
		}
		else if(LoopCount==(0))
		{
			return;
		}
		
		Start(critter);
	}
	
	void Cancel(Critter&critter)override
	{
		CurrentLoop=0;
		DefaultAction::Cancel(critter);
	}
	
	string GetInfo(){return"LoopAction";}
}

class CrittersHolderAction:DefaultAction
{
	private Critter@[]Critters;
	
	const Critter@[]GetCritters()
	{
		Critter@[]validCritters;
		for(uint i=0;i<Critters.length();i++)
		{
			if((@Critters[i]!=null)&&!Critters[i].IsNotValid)
			validCritters.insertLast(Critters[i]);
		}
		return validCritters;
	}
	
	Critter@GetHolderCritter(uint critterId)
	{
		for(uint i=0;i<Critters.length();i++)
		if(Critters[i].Id==critterId)
		return Critters[i];
		
		return null;
	}
	
	void AddCritter(Critter@critter)
	{
		Critters.insertLast(critter);
		for(uint i=0;i<SubActions.length();i++)
		{
			CrittersHolderAction@action=cast<CrittersHolderAction>(SubActions[i]);
			if((@action!=null))
			action.AddCritter(critter);
		}
	}
	
	void RemoveCritter(Critter@critter)
	{
		for(uint i=0;i<Critters.length();i++)
		{
			if(Critters[i].Id==critter.Id)
			{
				Critters.removeAt(i);
				break;
			}
		}
		for(uint i=0;i<SubActions.length();i++)
		{
			CrittersHolderAction@action=cast<CrittersHolderAction>(SubActions[i]);
			if((@action!=null))
			action.RemoveCritter(critter);
		}
	}
	
	Critter@GetClosestCritter(Critter&toCritter)
	{
		uint distance;
		uint closestDistance=0;
		Critter@closestCritter;
		for(uint i=0;i<GetCritters().length();i++)
		{
			Critter@critter=GetCritters()[i];
			distance=GetDistantion(toCritter.HexX,toCritter.HexY,critter.HexX,critter.HexY);
			if(closestCritter is null||distance<closestDistance)
			{
				closestDistance=distance;
				@closestCritter=critter;
			}
		}
		return closestCritter;
	}
	
	bool HasValidCritters()
	{
		return GetCritters().length()>0;
	}
	
	void ClearCritters()
	{
		Critters.resize(0);
		
		for(uint i=0;i<SubActions.length();i++)
		{
			CrittersHolderAction@action=cast<CrittersHolderAction>(SubActions[i]);
			if((@action!=null))
			action.ClearCritters();
		}
	}
}

class ItemsHolderAction:DefaultAction
{
	private Item@[]Items;
	
	const Item@[]GetItems(){
		Item@[]validItems;
		for(uint i=0;i<Items.length();i++)
		{
			if((@Items[i]!=null)&&!Items[i].IsNotValid)
			validItems.insertLast(Items[i]);
		}
		return validItems;
	}
	
	void AddItem(Item@item)
	{
		Items.insertLast(item);
		for(uint i=0;i<SubActions.length();i++)
		{
			ItemsHolderAction@action=cast<ItemsHolderAction>(SubActions[i]);
			if((@action!=null))
			action.AddItem(item);
		}
	}
	
	bool HasValidItems()
	{
		return GetItems().length()>0;
	}
	
	void ClearItems()
	{
		Items.resize(0);
		
		for(uint i=0;i<SubActions.length();i++)
		{
			ItemsHolderAction@action=cast<ItemsHolderAction>(SubActions[i]);
			if((@action!=null))
			action.ClearItems();
		}
	}
}

funcdef string@LexemGetterFunction(Critter&,Critter@);
class SetLexems:CrittersHolderAction
{
	private string@LexemId;
	private LexemGetterFunction@LexemGetter;
	
	SetLexems(string@lexemId,LexemGetterFunction@lexemGetter)
	{
		@LexemId=lexemId;
		@LexemGetter=lexemGetter;
	}
	
	void Perform(Critter&critter)
	{
		string lexems;
		if(HasValidCritters())
		{
			for(uint i=0;i<GetCritters().length();i++)
			{
				string@lexem=LexemGetter(critter,GetCritters()[i]);
				if(!(@lexem!=null))
				continue;
				
				if(lexems.length()>0)
				lexems+=", ";
				lexems+=lexem;
			}
		}
		else
		{
			string@lexem=LexemGetter(critter,null);
			if((@lexem!=null))
			lexems+=lexem;
		}
		
		critter.SetLexems("$"+LexemId+lexems);
		Finish(critter);
	}
}

string@GetName(Critter&critter,Critter@otherCritter)
{
	if(!(@otherCritter!=null))
	return null;
	return""+otherCritter.Name;
}

interface Condition
{
	bool Check(Critter&critter,Critter@otherCritter,Item@item);
}

void Info(string&message)
{
	
}

void ListActions(Critter&cr,int,int,int)
{
	string@[]keys;
	actionManager.runningActions.keys(keys);
	
	cr.Say((11),"Total action count: "+keys.length());
}

void SayYourAction(Critter&cr,int,int,int)
{
	Map@map=cr.GetMap();
	if(!(@map!=null))
	return;
	
	Critter@[]npcs;
	map.GetCritters(0,(0x0F)|(0x20),npcs);
	
	for(uint i=0;i<npcs.length();i++)
	{
		SayYourAction(npcs[i]);
	}
}

void SayYourAction(Critter&npc)
{
	Action@[]actions=actionManager.GetListeningActions(npc);
	if(actions.length()==0)
	npc.Say((2),"None");
	else
	{
		string sayString="";
		for(uint i=0;i<actions.length();i++)
		{
			if(i>0)
			sayString+=", ";
			sayString+=actions[i].GetInfo();
		}
		npc.Say((2),sayString);
	}
}

class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
}   

Entire@GetEntire(Map&map,int entireNum,int skip)
{
	Entire ent;
	if(map.GetEntireCoords(entireNum,skip,ent.HexX,ent.HexY)==false)
	return null;
	ent.Number=entireNum;
	return ent;
}

uint ParseEntires(Map&map,Entire[]&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	Entire[]entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                  

bool IsCritterInDeadZone(Critter&cr,Map&map,uint8 dir,uint8 hexFirst,uint8 hexEnd)
{
	uint crossNum=0;
	for(uint i=hexFirst;i<=hexEnd;i++)
	{
		if(BeamCrossing2Section(map,i,(i==hexEnd?hexFirst:i+1),cr.HexX,cr.HexY,dir))
		{
			crossNum++;
			
		}
	}
	bool inZone=false;
	if(crossNum>0&&(crossNum%2==1))
	inZone=true;
	
	return inZone;
	
}         

bool BeamCrossing2Section(Map&map,uint8 hexNum1,uint8 hexNum2,uint16 beamX,uint16 beamY,uint8 dir)
{
	
	uint16 hx0=beamX;
	uint16 beamX2=hx0;
	uint16 hy0=beamY;
	uint16 beamY2=hy0;
	uint steps=0;
	
	while(hx0!=beamX2||hy0!=beamY2||steps==0)
	{
		steps+=1;
		hx0=beamX2;
		hy0=beamY2;
		map.MoveHexByDir(beamX2,beamY2,dir,steps);
	} 
	
	uint16 hx1=0;
	uint16 hx2=0;
	uint16 hy1=0;
	uint16 hy2=0;
	
	if(!map.GetEntireCoords(hexNum1,0,hx1,hy1))
	return false;
	if(!map.GetEntireCoords(hexNum2,0,hx2,hy2))
	return false;                           
	
	float z=(int(hx1)-int(hx2))*(int(beamY2)-int(beamY))-(int(hy1)-int(hy2))*(int(beamX2)-int(beamX));
	
	float ch=(int(hx1)-int(beamX))*(int(beamY2)-int(beamY))-(int(hy1)-int(beamY))*(int(beamX2)-int(beamX));
	
	float cbeam=(int(hx1)-int(hx2))*(int(hy1)-int(beamY))-(int(hy1)-int(hy2))*(int(hx1)-int(beamX));
	
	if(z==0&&ch==0&&cbeam==0)
	return false;
	
	if(z==0)
	return false;
	
	float crossS=ch/z;
	
	float crossB=cbeam/z;
	return(0<crossS&&crossS<1&&0<crossB&&crossB<1);
}                                                                                                                                                                                                                                                                                                                                                                                                                                    

class Serializator
{
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer()
	{
		BufSize+=(128);
		Array.resize(BufSize);
	}
	
	void GrowBuffer(uint length)
	{
		BufSize+=length;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		bool result=SetAnyData(name,Array,DataSize);
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		if(not GetAnyData(name,Array))
		return false;
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator@SetCurPos(uint pos)
	{
		if(pos>BufSize)
		GrowBuffer(pos-BufSize+(128));
		CurPos=pos;
		return this;
	}
	
	Serializator@Fill(uint8 value,uint length)
	{
		if(CurPos+length>BufSize)
		GrowBuffer(CurPos+length-BufSize+(128));
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const bool&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const string&value)
	{
		uint len=value.rawLength();
		if(CurPos+len+1>BufSize)
		GrowBuffer(CurPos+len+1-BufSize+(128));
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int64[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int32[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int16[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int8[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint64[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint32[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint16[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint8[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const bool[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const string[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const Critter&cr)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const Item&item)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator@Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator@Get(int64[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(int32[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(int16[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(int8[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(uint64[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(uint32[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(uint16[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(uint8[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(bool[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(string[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator@Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
	uint8[]Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
};   

class ItemHolderWrapper
{ 
	
	private Critter@Npc;
	private Item@Container;
	private dictionary Containers;
	
	ItemHolderWrapper(Critter&npc)
	{
		@Npc=npc;
		Load();
	}
	
	ItemHolderWrapper(Item&container)
	{
		@Container=container;
		Load();
	}
	
	bool HoldsItems(string key)
	{
		return Containers.exists(key);
	}
	
	Item@[]PopItems(string key)
	{
		Item@[]items;
		Item@container=GetContainer(key,false);
		if((@container!=null))
		{
			container.GetItems(0,items);
			Containers.delete(key);
			Save();
		}
		
		return items;
	}
	
	void PutItems(string key,Item@[]items)
	{
		Item@container=GetContainer(key,true);
		if(!(@container!=null))
		return; 
		
		MoveItems(items,container,0);
	}
	
	private Item@GetContainer(string key,bool create)
	{
		Item@container;
		if(Containers.exists(key))
		{
			Containers.get(key,@container);
			return container;
		}
		else if(create)
		{
			if((@Npc!=null))
			@container=Npc.AddItem((467),1);
			else
			@container=Container.AddItem((467),1,0);
			if(!(@container!=null))
			return null;
			((container.Flags=(container.Flags)|((0x00000001))));
			Containers.set(key,@container);
			Save();
		}
		
		return container;
	}
	
	private void Load()
	{
		Serializator serializator;
		if(!serializator.Load(("ItemHolder_"+((@Npc!=null)?("NPC_"+Npc.Id):("Container_"+Container.Id)))))
		return;
		
		uint size=0;
		serializator.Get(size);
		for(uint i=0;i<size;i++)
		{
			string key="";
			serializator.Get(key);
			Item@item;
			serializator.Get(item);
			if((@item!=null))
			Containers.set(key,@item);
		}
	}
	
	private void Save()
	{
		Serializator serializator;
		
		string@[]keys;
		Containers.keys(keys);
		serializator.Set(keys.length);
		for(uint i=0;i<keys.length();i++)
		{
			Item@container;
			Containers.get(keys[i],@container);
			serializator.Set(keys[i]);
			serializator.Set(container.Id);
		}
		serializator.Save(("ItemHolder_"+((@Npc!=null)?("NPC_"+Npc.Id):("Container_"+Container.Id))));
	}
}

class PatrolEntireWrapper
{ 
	
	private uint mapId;
	private Entire@entire;
	private uint patroller;
	
	PatrolEntireWrapper(Map&map,Entire&entire)
	{
		mapId=map.Id;
		@this.entire=entire;
		patroller=0;
		Load();
	}
	
	private void Load()
	{
		Serializator serializator;
		if(!serializator.Load(("PatrolEntire_"+mapId+"_"+entire.Number+"_"+entire.HexX+"_"+entire.HexY)))
		return;
		
		serializator.Get(patroller);
	}
	
	private void Save()
	{
		Serializator serializator;
		
		serializator.Set(patroller);
		serializator.Save(("PatrolEntire_"+mapId+"_"+entire.Number+"_"+entire.HexX+"_"+entire.HexY));
	}
	
	void SetPatroller(Critter@critter)
	{
		patroller=(@critter!=null)?critter.Id:0;
		Save();
	}
	
	bool HasPatroller()
	{
		return patroller!=0;
	}
}

class VirtualRealityInfo
{ 
	
	private uint MapId;
	private uint Type;
	private uint MinNpc1Count;
	private uint MaxNpc1Count;
	private uint MinNpc2Count;
	private uint MaxNpc2Count;
	
	VirtualRealityInfo(Map&map)
	{
		MapId=map.Id;
		Type=0;
		MinNpc1Count=1;
		MaxNpc1Count=2;
		MinNpc2Count=1;
		MaxNpc2Count=1;
		Load();
	}
	
	private void Load()
	{
		Serializator serializator;
		if(!serializator.Load(("VRInfo_"+MapId)))
		return;
		
		serializator.Get(Type);
		serializator.Get(MinNpc1Count);
		serializator.Get(MaxNpc1Count);
		serializator.Get(MinNpc2Count);
		serializator.Get(MaxNpc2Count);
	}
	
	private void Save()
	{
		Serializator serializator;
		
		serializator.Set(Type);
		serializator.Set(MinNpc1Count);
		serializator.Set(MaxNpc1Count);
		serializator.Set(MinNpc2Count);
		serializator.Set(MaxNpc2Count);
		serializator.Save(("VRInfo_"+MapId));
	}
	
	void SetType(uint type)
	{
		Type=type;
		Save();
	}
	
	void SetNpc1Count(uint min,uint max)
	{
		MinNpc1Count=min;
		MaxNpc1Count=max;
		Save();
	}
	
	void SetNpc2Count(uint min,uint max)
	{
		MinNpc2Count=min;
		MaxNpc2Count=max;
		Save();
	}
	
	uint GetType()
	{
		return Type;
	}
	
	uint GetNpc1Count()
	{
		return Random(MinNpc1Count,MaxNpc1Count);
	}
	
	uint GetNpc2Count()
	{
		return Random(MinNpc2Count,MaxNpc2Count);
	}
}   

import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp,bool run)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,uint waitSecond,string@funcName)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";
import uint EraseAttackPlane(Critter&npc,Critter&target)from"npc_planes";
import void AddOffence(Critter&offender,uint areaId,uint offenceSeverity)from"custom_data";
import void UseDrugOn(Critter&cr,Critter&onCr,Item&drug)from"drugs";    

class Patrol:DefaultAction
{
	private uint EntireNum;
	private bool Run;
	private bool SetHomePos;
	private bool OnlyFreeEntire;
	private PatrolEntireWrapper@EntireWrapper;
	
	Patrol(uint entireNum,bool run)
	{
		EntireNum=entireNum;
		Run=run;
		SetHomePos=true;
		OnlyFreeEntire=false;
	}
	
	Patrol(uint entireNum,bool run,bool setHomePos,bool onlyFreeEntire)
	{
		EntireNum=entireNum;
		Run=run;
		SetHomePos=setHomePos;
		OnlyFreeEntire=onlyFreeEntire;
	}
	
	void Perform(Critter&critter)
	{
		Info("Performing partol action.");
		Map@map=critter.GetMap();
		if(!(@map!=null))
		{
			Finish(critter);
			return;
		}
		
		Entire[]entires;
		ParseEntires(map,entires,EntireNum);
		
		if(entires.length()==0)
		{
			Finish(critter);
			return;
		}
		
		uint16 hx=0;
		uint16 hy=0;
		uint8 dir=0;
		critter.GetHomePos(map.Id,hx,hy,dir);
		
		Entire@entire=Entire();
		entire.HexX=hx;
		entire.HexY=hy;
		
		int tryCount=10;
		if(OnlyFreeEntire)
		{
			while(tryCount-->0)
			{
				@entire=entires[Random(0,entires.length()-1)];
				PatrolEntireWrapper wrapper(map,entire);
				if(!wrapper.HasPatroller())
				{
					wrapper.SetPatroller(critter);
					@EntireWrapper=wrapper;
					break;
				}
			}
		}
		else
		while(entire.HexX==hx&&entire.HexY==hy&&tryCount-->0)
		@entire=entires[Random(0,entires.length()-1)];
		
		if(tryCount>0)
		{
			SetListening(true);
			AddWalkPlane(critter,(20),(105),0,entire.HexX,entire.HexY,Random(0,5),Run,1);
		}
		else
		{
			Finish(critter);
		}
	}
	
	int PlaneEndEvent(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)override
	{
		Info("Some plane ended.");
		if(plane.Identifier==(105))
		{
			Info("Patrol walk plane ended.");
			if(SetHomePos)
			critter.SetHomePos(critter.HexX,critter.HexY,Random(0,5));
			if((@EntireWrapper!=null))
			{
				EntireWrapper.SetPatroller(null);
				@EntireWrapper=null;
			}
			SetListening(false);
			Finish(critter);
			return(0);
		}
		return(0);
	}
	
	string GetInfo()override{return"Patrol";}
} 

class ChangeDirection:DefaultAction
{
	private uint Direction;
	private bool SetHome;
	
	ChangeDirection(uint direction)
	{
		Direction=direction;
		SetHome=false;
	}
	
	ChangeDirection(uint direction,bool setHome)
	{
		Direction=direction;
		SetHome=setHome;
	}
	
	void Perform(Critter&critter)override
	{
		if(critter.IsBusy())
		{
			Finish(critter);
			return;
		}
		Info("Performing change direction action.");
		Map@map=critter.GetMap();
		
		if(!(@map!=null))
		{
			Finish(critter);
			return;
		}
		uint direction=critter.Dir;
		
		while(Direction>5&&direction==critter.Dir)
		direction=Random(0,5);
		
		if((critter.Dir==0&&direction==5)
		||(critter.Dir==5&&direction==0)
		||(critter.Dir>direction&&critter.Dir-direction==1)
		||(critter.Dir<direction&&direction-critter.Dir==1))
		critter.SetDir(direction);
		else
		{
			uint16 hexX=critter.HexX;
			uint16 hexY=critter.HexY;
			Info("Was: "+hexX+", "+hexY);
			map.MoveHexByDir(hexX,hexY,direction,1);
			Info("Is: "+hexX+", "+hexY);
			if(map.IsHexPassed(hexX,hexY)&&!(@map.GetCritter(hexX,hexY)!=null))
			critter.MoveToDir(direction);
		}
		if(SetHome)
		critter.SetHomePos(critter.HexX,critter.HexY,critter.Dir);
		
		Finish(critter);
	}
	
	string GetInfo()override{return"ChangeDirection";}
}

class LookAround:DefaultAction
{
	LookAround(uint lookCount,uint lookTime)
	{
		for(uint i=0;i<lookCount;i++)
		{
			AddSubAction(ChangeDirection(100));
			AddSubAction(Wait(lookTime));
		}
	}
	
	string GetInfo()override{return"LookAround";}
}

class MoveTo:DefaultAction
{ 
	
	private uint16 HexX;
	private uint16 HexY;
	private uint8 Dir;
	private bool Run;
	private bool SetHome;
	private int EntireNum;
	
	MoveTo(uint16 hexX,uint16 hexY,bool run)
	{
		HexX=hexX;
		HexY=hexY;
		Dir=(100);
		Run=run;
		SetHome=false;
		EntireNum=0;
	}
	
	MoveTo(uint16 hexX,uint16 hexY,bool run,bool setHome)
	{
		HexX=hexX;
		HexY=hexY;
		Dir=(100);
		Run=run;
		SetHome=setHome;
		EntireNum=0;
	}
	
	MoveTo(uint16 hexX,uint16 hexY,uint8 dir,bool run,bool setHome)
	{
		HexX=hexX;
		HexY=hexY;
		Dir=dir;
		Run=run;
		SetHome=setHome;
		EntireNum=0;
	}
	
	MoveTo(int entireNum,bool run)
	{
		EntireNum=entireNum;
		Dir=(100);
		Run=run;
		SetHome=false;
	}
	
	void Perform(Critter&critter)override
	{
		if(EntireNum!=0&&!RefreshEntireHexes(critter))
		{
			Log("No entire found on map: "+EntireNum);
			Finish(critter);
			return;
		}
		
		uint8 dir=Dir==(100)
		?GetDirection(critter.HexX,critter.HexY,HexX,HexY)
		:Dir;
		critter.ErasePlane((2),false);
		AddWalkPlane(critter,(20),
		(106),0,HexX,HexY,
		dir,Run,0);
		SetListening(true);
	}
	
	private bool RefreshEntireHexes(Critter&critter)
	{
		Map@map=critter.GetMap();
		if(!(@map!=null))
		return false;
		
		HexX=critter.HexX;
		HexY=critter.HexY;
		
		if(!map.GetNearEntireCoords(EntireNum,HexX,HexY))
		return false;
		
		return true;
	}
	
	int PlaneEndEvent(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)override
	{
		if(plane.Identifier!=(106))
		return(0);
		
		if(reason==(41))
		return(1);
		
		SetListening(false);
		if(reason==(30))
		{
			critter.SetDir(GetDirection(critter.HexX,critter.HexY,HexX,HexY));
			if(SetHome)
			critter.SetHomePos(critter.HexX,critter.HexY,critter.Dir);
			Finish(critter);
		}
		else
		{
			Info("Starting next super action");
			StartNextSuperAction(critter);
		}
		
		return(0);
	}
	
	string GetInfo()override{return"MoveTo";}
}

class GoHome:DefaultAction
{
	private bool Run;
	
	GoHome(bool run)
	{
		Run=run;
	}
	
	void Perform(Critter&critter)override
	{
		uint mapId=0;
		uint16 hexX=0;
		uint16 hexY=0;
		uint8 dir=0;
		critter.GetHomePos(mapId,hexX,hexY,dir);
		
		SubActions.resize(0);
		AddSubAction(MoveTo(hexX,hexY,Run));
		Finish(critter);
	}
	
	string GetInfo()override{return"GoHome";}
}

funcdef void AnimateFunction(Critter&);
class Animate:DefaultAction
{
	private AnimateFunction@animateFunction;
	
	Animate(AnimateFunction@animateFunction)
	{
		@animateFunction=animateFunction;
	}
	
	void Perform(Critter&critter)override
	{
		animateFunction(critter);
		critter.Wait(__Breaktime);
		Finish(critter);
	}
	
	string GetInfo()override{return"AnimateFunction";}
}    

class Loot:CrittersHolderAction
{
	private uint LootType;
	private uint[]LootCritterIds;
	
	Loot()
	{
		LootType=(0);
	}
	
	Loot(uint lootType)
	{
		LootType=lootType;
	}
	
	Loot(Critter@toLoot)
	{
		AddCritter(toLoot);
		LootType=(0);
	}
	
	Loot(Critter@toLoot,uint lootType)
	{
		AddCritter(toLoot);
		LootType=lootType;
	}
	
	void Perform(Critter&critter)override
	{
		Info("Looting");
		if(!HasValidCritters())
		{
			Info("No valid critters");
			StartNextSuperAction(critter);
			return;
		}
		
		SetListening(true);
		LootCritterIds.resize(0);
		for(uint i=0;i<GetCritters().length();i++)
		{
			Critter@otherCritter=GetCritters()[i];
			LootCritterIds.insertLast(otherCritter.Id);
			AddWalkPlane(critter,(20),(107),otherCritter.Id,
			otherCritter.HexX,otherCritter.HexY,
			GetDirection(critter.HexX,critter.HexY,otherCritter.HexX,otherCritter.HexY),
			true,1);
		}
	}
	
	int PlaneEndEvent(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)override
	{
		if(plane.Type==(2)&&plane.Identifier==(107))
		{
			Critter@lootCritter=GetHolderCritter(plane.IdentifierExt);
			if((@lootCritter!=null))
			{
				Info("Valid loot critter");
				Item@[]items;
				lootCritter.GetItems((0),items);
				lootCritter.GetItems((1),items);
				lootCritter.GetItems((2),items);
				lootCritter.GetItems((3),items);
				lootCritter.GetMap().GetItems(lootCritter.HexX,lootCritter.HexY,items);
				critter.SetDir(GetDirection(critter.HexX,critter.HexY,lootCritter.HexX,lootCritter.HexY));
				
				switch(LootType)
				{
					case(0):
					Info("Holding");
					MoveItems(items,critter);
					break;
					case(1):
					{
						Info("Remembering");
						ItemHolderWrapper wrapper(critter);
						wrapper.PutItems(""+lootCritter.Id,items);
						break;
					}
					case(2):
					Info("Deleting");
					for(uint i=0;i<items.length();i++)
					DeleteItem(items[i]);
					break;
				}
				
				critter.Animate(0,(27),null,true,true);
				critter.Wait(2000);
			}
			
			RemoveFromArray(LootCritterIds,plane.IdentifierExt);
			if(LootCritterIds.length()==0)
			{
				SetListening(false);
				Finish(critter);
			}
		}
		return(0);
	}
	
	string GetInfo()override{return"Loot";}
}

class Follow:CrittersHolderAction
{
	private uint MaxDistance;
	private bool Run;
	
	private Critter@Followed;
	
	Follow(uint maxDistance)
	{
		MaxDistance=maxDistance;
		Run=true;
	}
	
	Follow(uint maxDistance,bool run)
	{
		MaxDistance=maxDistance;
		Run=run;
	}
	
	void Perform(Critter&critter)override
	{
		if(!HasValidCritters())
		{
			StartNextSubAction(critter);
			return;
		}
		
		Info("Performing Follow");
		@Followed=GetClosestCritter(critter);
		if(!(@Followed!=null))
		{
			Info("Starting next super action.");
			StartNextSuperAction(critter);
			return;
		}
		
		SetListening(true);
		Info("Going to followed");
		MoveTo(Followed.HexX,Followed.HexY,true).Start(critter);
	}
	
	int PlaneEndEvent(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)override
	{
		if(plane.Identifier!=(106))
		return(0);
		
		if(!(@Followed!=null))
		{
			Info("No valid critter found...finishing.");
			SetListening(false);
			ClearCritters();
			StartNextSuperAction(critter);
			return(0);
		}
		
		if(MaxDistance>=GetDistantion(critter.HexX,critter.HexY,Followed.HexX,Followed.HexY))
		{
			Info("Finishing follow.");
			SetListening(false);
			RemoveCritter(Followed);
			for(uint i=0;i<SubActions.length();i++)
			{
				CrittersHolderAction@action=cast<CrittersHolderAction>(SubActions[i]);
				if((@action!=null))
				{
					action.ClearCritters();
					action.AddCritter(Followed);
				}
			}
			Finish(critter);
		}
		else
		{
			Info("Repeating follow.");
			MoveTo(Followed.HexX,Followed.HexY,true).Start(critter);
		}
		
		return(0);
	}
	
	void StartNextSuperAction(Critter&critter)
	{
		if(HasValidCritters())
		Start(critter);
		else
		CrittersHolderAction::StartNextSuperAction(critter);
	}
	
	string GetInfo()override{return"Follow";}
}

class LookAt:CrittersHolderAction
{
	void Perform(Critter&critter)override
	{
		if(!HasValidCritters())
		{
			StartNextSuperAction(critter);
			return;
		}
		
		critter.SetDir(GetDirection(critter.HexX,critter.HexY,GetCritters()[0].HexX,GetCritters()[0].HexY));
		Finish(critter);
	}
	
	string GetInfo()override{return"LookAt";}
}

class PickUp:ItemsHolderAction
{ 
	
	private uint16[]PickItemPids;
	
	void Perform(Critter&critter)override
	{
		if(!HasValidItems())
		{
			StartNextSuperAction(critter);
			return;
		}
		Info("Performing pick up");
		PickItemPids.resize(0);
		for(uint i=0;i<GetItems().length();i++)
		{
			Item@item=GetItems()[i];
			PickItemPids.insertLast(item.GetProtoId());
			AddPickPlane(critter,((35)-1),item,0,false);
		}
		SetListening(true);
	}
	
	int PlaneEndEvent(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)override
	{
		if(plane.Type!=(3)||plane.Priority!=((35)-1))
		return(0);
		
		RemoveFromArray(PickItemPids,plane.Pick_Pid);
		if(PickItemPids.length()==0)
		{
			Info("Finishing pick up.");
			SetListening(false);
			Finish(critter);
		}
		
		return(0);
	}
}

class Inform:CrittersHolderAction
{
	private uint16 TextMsg;
	private uint StringNum;
	
	Inform(uint16 textMsg,uint stringNum)
	{
		TextMsg=textMsg;
		StringNum=stringNum;
	}
	
	void Perform(Critter&critter)override
	{
		Info("Informing "+GetCritters().length()+" critters.");
		if(!HasValidCritters())
		{
			StartNextSuperAction(critter);
			return;
		}
		for(uint i=0;i<GetCritters().length();i++)
		GetCritters()[i].SayMsg((11),TextMsg,StringNum);
		Finish(critter);
	}
}

class Wait:DefaultAction
{
	private uint WaitTimeFrom;
	private uint WaitTimeTo;
	private uint ToTime;
	
	Wait(uint waitTime)
	{
		WaitTimeFrom=waitTime;
		WaitTimeTo=waitTime;
	}
	
	Wait(uint waitTimeFrom,uint waitTimeTo)
	{
		WaitTimeFrom=waitTimeFrom;
		WaitTimeTo=waitTimeTo;
	}
	
	void Perform(Critter&critter)
	{
		if(WaitTimeFrom==0&&WaitTimeTo==0)
		{
			Finish(critter);
			return;
		}
		
		Info("Performing wait action.");
		ToTime=__FullSecond+Random(WaitTimeFrom,WaitTimeTo);
		CreateWaitPlane(critter);
		SetListening(true);
	}
	
	private void CreateWaitPlane(Critter&critter)
	{
		NpcPlane@plane=CreatePlane();
		plane.Type=(0);
		plane.Identifier=(104);
		plane.Priority=(10);
		plane.Misc_WaitSecond=__FullSecond+((1)*__TimeMultiplier);
		critter.AddPlane(plane);
	}
	
	int PlaneEndEvent(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)override
	{
		Info("Some plane ended.");
		if(plane.Identifier==(104))
		{
			if(__FullSecond>=ToTime)
			{
				Info("Wait plane ended.");
				SetListening(false);
				Finish(critter);
			}
			else
			{
				plane.Misc_WaitSecond=__FullSecond+((1)*__TimeMultiplier);
				return(1);
			}
		}
		return(0);
	}
	
	void Cancel(Critter&critter)
	{
		SetListening(false);
		DefaultAction::Cancel(critter);
	}
	
	string GetInfo()override{return"Wait";}
}

class RepeatAtInterval:DefaultAction
{
	private uint IntervalFrom;
	private uint IntervalTo;
	
	private uint NextStart;
	
	RepeatAtInterval(uint interval)
	{
		IntervalFrom=interval;
		IntervalTo=interval;
		NextStart=0;
	}
	
	RepeatAtInterval(uint intervalFrom,uint intervalTo)
	{
		IntervalFrom=intervalFrom;
		IntervalTo=intervalTo;
		NextStart=0;
	}
	
	void Perform(Critter&critter)override
	{
		if(__FullSecond<NextStart||!Check(critter,null,null))
		{
			StartNextSuperAction(critter);
			return;
		}
		
		NextStart=__FullSecond+Random(IntervalFrom,IntervalTo);
		Finish(critter);
	}
}

class Heal:CrittersHolderAction
{
	Heal()
	{
		AddSubAction(Wait(((2)*__TimeMultiplier)));
	}
	
	void Perform(Critter&critter)override
	{
		if(!HasValidCritters())
		{
			StartNextSuperAction(critter);
			return;
		}
		
		for(uint i=0;i<GetCritters().length();i++)
		{
			Critter@patient=GetCritters()[i];
			critter.SetDir(GetDirection(critter.HexX,critter.HexY,patient.HexX,patient.HexY));
			if(patient.IsInjured())
			{
				critter.Animate(0,(28),null,true,true);
				for(uint i=(__DamageBegin);i<=(__DamageEnd);i++)
				patient.DamageBase[i]=0;
			}
			if(patient.Stat[(72)]<patient.Stat[(7)])
			{
				critter.Animate(0,(28),null,true,true);
				patient.StatBase[(72)]=patient.Stat[(7)];
			}
		}
		Finish(critter);
	}
}

class Hide:DefaultAction
{
	void Perform(Critter&critter)
	{
		critter.ParamBase[(836)]|=(4);
		Finish(critter);
	}
}

class Show:DefaultAction
{
	void Perform(Critter&critter)
	{
		critter.ParamBase[(836)]&=~(4);
		Finish(critter);
	}
}

class WatchForThieves:CrittersHolderAction
{
	float ChanceToNoticeFailingThief;
	float ChanceToNoticeSuccessfullThief;
	
	WatchForThieves(float chanceToNoticeFailingThief,float chanceToNoticeSuccessfullThief)
	{
		ChanceToNoticeFailingThief=chanceToNoticeFailingThief;
		ChanceToNoticeSuccessfullThief=chanceToNoticeSuccessfullThief;
		BlockSubActions();
	}
	
	bool IsListening()override{return true;}
	
	void SeeSomeoneStealingEvent(Critter&critter,Critter&victim,Critter&thief,bool success,Item&item,uint count)override
	{
		Info("Seeing someone stealing something");
		if((success&&((float(Random(1,10000))/100.0f)<=ChanceToNoticeSuccessfullThief))
		||(!success&&((float(Random(1,10000))/100.0f)<=ChanceToNoticeFailingThief)))
		{
			ClearCritters();
			AddCritter(thief);
			UnblockSubActions();
			Start(critter);
			BlockSubActions();
		}
	}
	
	string GetInfo()override{return"AttackThief";}
}

class AttackAttacker:ListeningAction
{
	private bool OnlyPlayer;
	
	AttackAttacker()
	{
		OnlyPlayer=true;
	}
	
	AttackAttacker(bool onlyPlayer)
	{
		OnlyPlayer=onlyPlayer;
	}
	
	bool AttackedEvent(Critter&critter,Critter&attacker)override
	{
		Info("Someone attacked me");
		AddAttackPlane(critter,0,attacker,AIData_[(((critter.Stat[(105)])<(282)?(critter.Stat[(105)]):0)*22+2)],true);
		PerformAndAction(critter,attacker,null);
		return true;
	}
	
	void SeeSomeoneAttackEvent(Critter&critter,Critter&attacker,Critter&attacked)override
	{
		Info("Seeing someone attacking");
		if(OnlyPlayer&&!attacker.IsPlayer())
		return;
		AddAttackPlane(critter,0,attacker,AIData_[(((critter.Stat[(105)])<(282)?(critter.Stat[(105)]):0)*22+2)],true);
		PerformAndAction(critter,attacker,null);
	}
	
	string GetInfo()override{return"AttackAttacker";}
}

class AttackWithForceFlags:ListeningAction
{
	private uint AttackForceFlags;
	
	AttackWithForceFlags(uint attackForceFlags)
	{
		AttackForceFlags=attackForceFlags;
	}
	
	bool AttackEvent(Critter&critter,Critter&target)override
	{
		if(!target.IsPlayer())
		return false;
		
		if(((float(Random(1,10000))/100.0f)<=Chance))
		{
			PerformAndAction(critter,target,null);
			Info("Attacking with force flags: "+AttackForceFlags);
			critter.ParamBase[(832)]=AttackForceFlags;
		}
		else
		{
			critter.ParamBase[(832)]=0;
		}
		
		return false;
	}
	
	int PlaneEndEvent(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)override
	{
		if(plane.Type==(1))
		critter.ParamBase[(832)]=0;
		
		return(0);
	}
	
	string GetInfo()override{return"AttackWithForceFlags";}
}

class AttackWithSpecialAttack:ListeningAction
{
	private uint SpecialAttackFlags;
	
	AttackWithSpecialAttack(uint specialAttackFlags)
	{
		SpecialAttackFlags=specialAttackFlags;
	}
	
	bool AttackEvent(Critter&critter,Critter&target)override
	{
		if(!target.IsPlayer())
		return false;
		
		if(((float(Random(1,10000))/100.0f)<=Chance))
		{
			PerformAndAction(critter,target,null);
			Info("Attacking with force flags: "+SpecialAttackFlags);
			critter.ParamBase[(838)]=SpecialAttackFlags;
		}
		else
		{
			critter.ParamBase[(838)]=0;
		}
		
		return false;
	}
	
	int PlaneEndEvent(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)override
	{
		if(plane.Type==(1))
		critter.ParamBase[(838)]=0;
		
		return(0);
	}
	
	string GetInfo()override{return"AttackWithSpecialAttack";}
}

class ProvideReinforcements:ListeningAction
{
	
	int MessageNumber;
	uint MaxDistance;
	
	ProvideReinforcements(uint messageNumber)
	{
		MessageNumber=messageNumber;
		MaxDistance=(0);
	}
	
	ProvideReinforcements(uint messageNumber,uint maxDistance)
	{
		MessageNumber=messageNumber;
		MaxDistance=maxDistance;
	}
	
	void MessageEvent(Critter&critter,Critter&messenger,int message,int value)
	{
		if(message!=MessageNumber||!Check(critter,messenger,null))
		return;
		
		if(MaxDistance!=(0))
		{
			uint distance=GetDistantion(critter.HexX,critter.HexY,messenger.HexX,messenger.HexY);
			if(distance>MaxDistance)
			return;
		}
		
		Critter@offender=GetCritter(value);
		if(!(@offender!=null))
		return;
		AddAttackPlane(critter,0,offender,AIData_[(((critter.Stat[(105)])<(282)?(critter.Stat[(105)]):0)*22+2)],true);
		PerformAndAction(critter,messenger,null);
	}
	
	string GetInfo()override{return"ProvideReinforcements";}
}

class UseDrug:DefaultAction
{
	private uint[]@DrugPids;
	
	UseDrug(uint drugPid)
	{
		uint[]drugPids={drugPid};
		@DrugPids=drugPids;
	}
	
	UseDrug(uint[]drugPids)
	{
		@DrugPids=drugPids;
	}
	
	void Perform(Critter&critter)override
	{
		int apCost=__RtApCostUseItem;
		
		if(apCost<=critter.Stat[(75)])
		for(uint i=0;i<DrugPids.length();i++)
		{
			Item@item=critter.GetItem(DrugPids[i],-1);
			if((@item!=null))
			{
				UseDrugOn(critter,critter,item);
				critter.Animate(0,(28),null,true,true);
				critter.StatBase[(75)]-=__RtApCostUseItem*100;
				critter.Wait(2000);
				break;
			}
		}  
		
		Finish(critter);
	}
}

class UseReinforcements:ListeningAction
{
	private uint LastMessageTime;
	private uint MessageNumber;
	
	UseReinforcements(uint messageNumber)
	{
		MessageNumber=messageNumber;
		LastMessageTime=__FullSecond;
	}
	
	bool AttackEvent(Critter&critter,Critter&target)
	{
		if(!((float(Random(1,10000))/100.0f)<=Chance)||!Check(critter,target,null)||LastMessageTime+300>__FullSecond)
		return false;
		
		uint time=GetTick();
		critter.SendMessage(MessageNumber,target.Id,(2));
		Info("Sending message took "+(GetTick()-time)+" ms");
		LastMessageTime=__FullSecond;
		PerformAndAction(critter,target,null);
		return false;
	}
	
	string GetInfo()override{return"UseReinforcements";}
}

class CallReinforcements:CrittersHolderAction
{
	private uint MessageNumber;
	
	CallReinforcements(uint messageNumber)
	{
		MessageNumber=messageNumber;
	}
	
	void Perform(Critter&critter)override
	{
		if(!HasValidCritters())
		{
			StartNextSuperAction(critter);
			return;
		}
		
		for(uint i=0;i<GetCritters().length();i++)
		critter.SendMessage(MessageNumber,GetCritters()[i].Id,(2));
		
		Finish(critter);
	}
	
	string GetInfo()override{return"CallReinforcements";}
}

class SetAttackerJailTimeout:ListeningAction
{
	private uint JailTimeOut;
	
	SetAttackerJailTimeout(uint jailTimeOut)
	{
		JailTimeOut=jailTimeOut;
	}
	
	bool AttackedEvent(Critter&critter,Critter&attacker)override
	{
		if(attacker.IsPlayer())
		attacker.TimeoutBase[(250)]=__FullSecond+JailTimeOut;
		
		return false;
	}
	
	void SeeSomeoneAttackEvent(Critter&critter,Critter&attacker,Critter&attacked)override
	{
		if(attacker.IsPlayer())
		attacker.TimeoutBase[(250)]=__FullSecond+JailTimeOut;
	}
	
	void DeadEvent(Critter&critter,Critter@killer)override
	{
		if((@killer!=null)&&killer.IsPlayer())
		killer.TimeoutBase[(250)]=__FullSecond+JailTimeOut;
	}
	
	void SeeSomeoneDeadEvent(Critter&critter,Critter&killed,Critter@killer)override
	{
		if((@killer!=null)&&killer.IsPlayer())
		killer.TimeoutBase[(250)]=__FullSecond+JailTimeOut;
	}
	
	string GetInfo()override{return"SetAttackerJailTimeout";}
}

class SetHome:DefaultAction
{
	void Perform(Critter&critter)override
	{
		critter.SetHomePos(critter.HexX,critter.HexY,critter.Dir);
	}
}

class SetJailTimeout:CrittersHolderAction
{
	private uint JailTimeOut;
	
	SetJailTimeout(uint jailTimeOut)
	{
		JailTimeOut=jailTimeOut;
	}
	
	void Perform(Critter&critter)override
	{
		if(!HasValidCritters())
		{
			StartNextSuperAction(critter);
			return;
		}
		for(uint i=0;i<GetCritters().length();i++)
		GetCritters()[i].TimeoutBase[(250)]=__FullSecond+JailTimeOut;
		
		Finish(critter);
	}
}

class TransitCritterToMap:CrittersHolderAction
{
	private Map@Map;
	private uint MapProtoId;
	private uint EntireNum;
	private uint16 HexX;
	private uint16 HexY;
	private bool UseEntire;
	
	TransitCritterToMap(uint mapProtoId,uint entireNum)
	{
		MapProtoId=mapProtoId;
		@Map=null;
		EntireNum=entireNum;
		UseEntire=true;
	}
	
	TransitCritterToMap(Map@map,uint16 hexX,uint16 hexY)
	{
		@Map=map;
		HexX=hexX;
		HexY=hexY;
		UseEntire=false;
	}
	
	TransitCritterToMap(Map@map,uint entireNum)
	{
		@Map=map;
		EntireNum=entireNum;
		UseEntire=true;
	}
	
	void Perform(Critter&critter)override
	{
		if(!HasValidCritters())
		{
			StartNextSuperAction(critter);
			return;
		}
		Map@map=(@Map!=null)?Map:GetMapByPid(MapProtoId,0);
		if(!(@map!=null))
		{
			StartNextSuperAction(critter);
			return;
		}
		
		if(UseEntire)
		if(!GetEntireFreeHex(map,EntireNum,HexX,HexY))
		{
			StartNextSuperAction(critter);
			return;
		}
		
		for(uint i=0;i<GetCritters().length();i++)
		GetCritters()[i].TransitToMap(map.Id,HexX,HexY,GetCritters()[i].Dir);
		
		Finish(critter);
	}
	
	string GetInfo()override{return"TransitCritterToMap";}
}

class TransitCritterToGlobal:CrittersHolderAction
{
	void Perform(Critter&critter)override
	{
		if(!HasValidCritters())
		{
			StartNextSuperAction(critter);
			return;
		}
		
		for(uint i=0;i<GetCritters().length();i++)
		GetCritters()[i].TransitToGlobal(false);
		
		Finish(critter);
	}
	
	string GetInfo()override{return"TransitCritterToGlobal";}
}

class Revive:CrittersHolderAction
{
	Revive(){}
	
	Revive(Critter@toRevive)
	{
		AddCritter(toRevive);
	}
	
	void Perform(Critter&critter)override
	{
		if(!HasValidCritters())
		{
			StartNextSuperAction(critter);
			return;
		}
		for(uint i=0;i<GetCritters().length();i++)
		{
			Critter@otherCritter=GetCritters()[i];
			if(otherCritter.IsDead())
			otherCritter.ToLife();
		}
		Finish(critter);
	}
	
	string GetInfo()override{return"Revive";}
}

funcdef void CritterFunction(Critter&,Critter@);

class Run:DefaultAction
{
	private CritterFunction@Function;
	
	Run(CritterFunction@function)
	{
		@Function=function;
	}
	
	void Perform(Critter&critter)override
	{
		Function(critter,null);
		Finish(critter);
	}
}

class RunCritterFunction:CrittersHolderAction
{
	private CritterFunction@Function;
	
	RunCritterFunction(CritterFunction@function)
	{
		@Function=function;
	}
	
	void Perform(Critter&critter)override
	{
		for(uint i=0;i<GetCritters().length();i++)
		Function(critter,GetCritters()[i]);
		
		Finish(critter);
	}
}

class TakeToJail:CrittersHolderAction
{
	TakeToJail(Map@jailMap,uint jailEntire)
	{
		AddSubAction(Loot());
		AddSubAction(Say((0),70110));
		AddSubAction(Wait(((3)*__TimeMultiplier)));
		AddSubAction(TransitCritterToMap(jailMap,jailEntire)
		.AddSubAction(RunCritterFunction(FunctionSetJailed))
		.AddSubAction(Revive())
		.AddSubAction(RunCritterFunction(FunctionRefreshVisible)));
		AddSubAction(GoHome(true));
	}
	
	void Perform(Critter&critter)override
	{
		if(!HasValidCritters())
		{
			StartNextSuperAction(critter);
			return;
		}
		
		Finish(critter);
	}
	
	string GetInfo()override{return"TakeToJail";}
}

class ReleaseFromJail:CrittersHolderAction
{
	private uint16 JailDoorHexX;
	private uint16 JailDoorHexY;
	
	ReleaseFromJail(uint16 jailDoorHexX,uint16 jailDoorHexY)
	{
		JailDoorHexX=jailDoorHexX;
		JailDoorHexY=jailDoorHexY;
		AddSubAction(MoveTo(JailDoorHexX,JailDoorHexY,false));
		AddSubAction(Say((0),70111));
		AddSubAction(Wait(((3)*__TimeMultiplier)));
		AddSubAction(TransitCritterToGlobal()
		.AddSubAction(RunCritterFunction(FunctionUnsetJailed)));
	}
	
	void Perform(Critter&critter)override
	{
		if(!HasValidCritters())
		{
			StartNextSuperAction(critter);
			return;
		}
		
		Finish(critter);
	}
	
	string GetInfo()override{return"ReleaseFromJail";}
}

void FunctionSetJailed(Critter&critter,Critter@otherCritter)
{
	if((@otherCritter!=null))
	otherCritter.ParamBase[(833)]=1;
}

void FunctionUnsetJailed(Critter&critter,Critter@otherCritter)
{
	if((@otherCritter!=null))
	otherCritter.ParamBase[(833)]=0;
}

void FunctionRefreshVisible(Critter&critter,Critter@otherCritter)
{
	if((@otherCritter!=null))
	otherCritter.RefreshVisible();
}

class CancelSneaking:CrittersHolderAction
{
	CancelSneaking()
	{
		BlockSubActions();
		SetListening(true);
	}
	
	void ShowCritterEvent(Critter&critter,Critter&showCritter)override
	{
		ClearCritters();
		if(showCritter.Mode[(510)]==0||!((float(Random(1,10000))/100.0f)<=Chance))
		return;
		
		AddCritter(showCritter);
		showCritter.ModeBase[(510)]=0;
		
		PerformAndAction(critter,showCritter,null);
		
		UnblockSubActions();
		SetListening(false);
		Start(critter);
	}
	
	void SeeSomeoneUseSkill(Critter&critter,Critter&skillCritter,int skill,Critter@onCritter,Item@onItem,Scenery@onScenery)override
	{
		ClearCritters();
		if(skill!=(208)||!((float(Random(1,10000))/100.0f)<=Chance))
		return;
		
		AddCritter(skillCritter);
		skillCritter.ModeBase[(510)]=1;
		
		PerformAndAction(critter,skillCritter,onItem);
		
		UnblockSubActions();
		SetListening(false);
		Start(critter);
	}
	
	void StartNextSuperAction(Critter&critter)override
	{
		BlockSubActions();
		SetListening(true);
		CrittersHolderAction::StartNextSuperAction(critter);
	}
	
	string GetInfo()override{return"CancelSneaking";}
}

class RecordOffence:CrittersHolderAction
{
	private uint OffenceArea;
	private uint AttackOffenceSeverity;
	private uint KillOffenceSeverity;
	private uint OffenceSeverity;
	private bool Listener;
	
	RecordOffence(uint offenceArea)
	{
		OffenceArea=offenceArea;
		AttackOffenceSeverity=1;
		KillOffenceSeverity=3;
		Listener=true;
	}
	
	RecordOffence(uint offenceArea,uint offenceSeverity)
	{
		OffenceArea=offenceArea;
		OffenceSeverity=offenceSeverity;
		Listener=false;
	}
	
	void Perform(Critter&critter)override
	{
		if(Listener)
		{
			SetListening(true);
			Finish(critter);
		}
		else if(HasValidCritters())
		{
			for(uint i=0;i<GetCritters().length();i++)
			AddOffence(GetCritters()[i],OffenceArea,OffenceSeverity);
			Finish(critter);
		}
		else
		{
			StartNextSuperAction(critter);
		}
	}
	
	bool AttackedEvent(Critter&critter,Critter&attacker)override
	{
		if(!attacker.IsPlayer())
		return false;
		AddOffence(attacker,OffenceArea,AttackOffenceSeverity);
		return false;
	}
	
	void DeadEvent(Critter&critter,Critter@killer)override
	{
		if(!killer.IsPlayer())
		return;
		AddOffence(killer,OffenceArea,KillOffenceSeverity);
	}
	
	void SeeSomeoneAttackedEvent(Critter&critter,Critter&attacked,Critter&attacker)override
	{
		if(!attacker.IsPlayer())
		return;
		AddOffence(attacker,OffenceArea,AttackOffenceSeverity);
	}
	
	void SeeSomeoneDeadEvent(Critter&critter,Critter&killed,Critter@killer)override
	{
		if(!(@killer!=null)||!killer.IsPlayer())
		return;
		AddOffence(killer,OffenceArea,KillOffenceSeverity);
	}
	
	string GetInfo()override{return"RecordOffence";}
}

class Attack:CrittersHolderAction
{
	private uint[]TargetIds;
	
	void Perform(Critter&critter)override
	{
		if(!HasValidCritters())
		{
			StartNextSuperAction(critter);
			return;
		}
		
		Info("Performing Attack action");
		SetListening(true);
		TargetIds.resize(0);
		for(uint i=0;i<GetCritters().length();i++)
		{
			TargetIds.insertLast(GetCritters()[i].Id);
			Log("Setting min HP to: "+AIData_[(((critter.Stat[(105)])<(282)?(critter.Stat[(105)]):0)*22+2)]);
			AddAttackPlane(critter,0,GetCritters()[i],AIData_[(((critter.Stat[(105)])<(282)?(critter.Stat[(105)]):0)*22+2)],true);
		}
	}
	
	int PlaneEndEvent(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)override
	{
		if(plane.Type!=(1)
		||(reason==(39)&&(@critter.GetMap()!=null)&&critter.GetMap().IsTurnBased()))
		return(0);
		
		RemoveFromArray(TargetIds,plane.Attack_TargId);
		
		if(TargetIds.length()==0)
		{
			Info("Ending Attack action");
			SetListening(false);
			Finish(critter);
		}
		
		return(0);
	}
	
	string GetInfo()override{return"Attack";}
}

class ForbidItems:CrittersHolderAction
{
	private uint16[]@ItemPids;
	private uint[]@SearchSlots;
	
	ForbidItems(uint16[]itemPids)
	{
		@ItemPids=itemPids;
		uint[]slots={(1),(2),(0)};
		@SearchSlots=slots;
		BlockSubActions();
	}
	
	bool IsListening()override{return true;}
	
	void ShowCritterEvent(Critter&critter,Critter&showCritter)override
	{
		if(showCritter.IsPlayer()&&HasForbiddenItems(showCritter))
		{
			AddCritter(showCritter);
			UnblockSubActions();
			Start(critter);
			BlockSubActions();
		}
		else
		{
			ClearCritters();
		}
	}
	
	bool HasForbiddenItems(Critter&critter)
	{
		Item@[]items;
		for(uint i=0;i<SearchSlots.length();i++)
		critter.GetItems(SearchSlots[i],items);
		
		for(uint i=0;i<items.length();i++)
		if(IsForbidden(items[i]))
		return true;
		
		return false;
	}
	
	bool IsForbidden(Item@item)
	{
		if(!(@item!=null))
		return false;
		return Present(item.GetProtoId(),ItemPids);
	}
}

class DeleteCritterItems:CrittersHolderAction
{
	private uint16[]ItemPids;
	
	DeleteCritterItems(uint16[]itemPids)
	{
		ItemPids=itemPids;
	}
	
	void Perform(Critter&critter)override
	{
		if(!HasValidCritters())
		{
			StartNextSuperAction(critter);
			return;
		}
		for(uint i=0;i<GetCritters().length();i++)
		DelItems(GetCritters()[i]);
		Finish(critter);
	}
	
	private void DelItems(Critter&critter)
	{
		for(uint i=0;i<ItemPids.length();i++)
		{
			Item@item=critter.GetItem(ItemPids[i],-1);
			if((@item!=null))DeleteItem(item);
		}
	}
}

class DeleteItems:ItemsHolderAction
{
	void Perform(Critter&critter)override
	{
		if(!HasValidItems())
		{
			StartNextSuperAction(critter);
			return;
		}
		Info("Performing delete items: "+GetItems().length());
		for(uint i=0;i<GetItems().length();i++)
		DeleteItem(GetItems()[i]);
	}
}

class SetLocalVar:CrittersHolderAction
{
	private uint LocalVar;
	private uint Value;
	
	SetLocalVar(uint localVar,uint value)
	{
		LocalVar=localVar;
		Value=value;
	}
	
	void Perform(Critter&critter)override
	{
		if(!HasValidCritters())
		{
			StartNextSuperAction(critter);
			return;
		}
		
		for(uint i=0;i<GetCritters().length();i++)
		{
			GameVar@lvar=GetLocalVar(LocalVar,GetCritters()[i].Id);
			if((@lvar!=null)&&lvar!=Value)
			lvar=Value;
		}
		Finish(critter);
	}
}

class CloseDoor:ListeningAction
{ 
	
	int PlaneBeginEvent(Critter&critter,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)override
	{
		if(plane.Type!=(2)||plane.Identifier==(85436))
		return(0);
		
		NpcPlane@[]@doorClosePlanes=CreateDoorClosePlanes(critter,plane);
		if(!(@doorClosePlanes!=null))
		return(0);
		
		Log("Found some door in path. Planes = "+doorClosePlanes.length());
		for(uint i=0;i<doorClosePlanes.length();i++)
		critter.AddPlane(doorClosePlanes[i]);
		
		return(0);
	}
	
	private NpcPlane@[]@CreateDoorClosePlanes(Critter&critter,NpcPlane&plane)
	{
		Map@map=critter.GetMap();
		if(!(@map!=null))
		return null;
		
		NpcPlane@[]planes;
		uint16 hexX=critter.HexX;
		uint16 hexY=critter.HexY;
		uint16 endHexX=plane.Walk_HexX;
		uint16 endHexY=plane.Walk_HexY;
		Item@door;
		bool foundDoor=true;
		
		while(hexX!=endHexX&&hexY!=endHexY)
		{
			int dir=GetOffsetDir(hexX,hexY,endHexY,endHexY,89);
			map.MoveHexByDir(hexX,hexY,dir,1);
			
			NpcPlane@walkPlane=plane.GetCopy();
			walkPlane.Walk_HexX=hexX;
			walkPlane.Walk_HexY=hexY;
			walkPlane.Walk_Dir=dir;
			walkPlane.Identifier=(85436);
			planes.insertLast(walkPlane);
			
			if((@door!=null)&&GetDistantion(door.HexX,door.HexY,hexX,hexY)==1)
			planes.insertLast(CreateCloseDoorPlane(@door));
			
			@door=map.GetDoor(hexX,hexY);
			if((@door!=null))
			foundDoor=true;
		}
		
		return foundDoor?@planes:null;
	}
	
	private NpcPlane@CreateCloseDoorPlane(Item@door)
	{
		NpcPlane@plane=CreatePlane();
		plane.Type=(3);
		plane.Priority=(35);
		plane.Pick_HexX=door.HexX;
		plane.Pick_HexY=door.HexY;
		plane.Pick_Pid=door.GetProtoId();
		plane.Pick_UseItemId=0;
		plane.Pick_ToOpen=false;
		plane.Run=true;
		return plane;
	}
} 

import void InitTrader(Critter&npc)from"trader";   

void InitGyro(Critter&critter,bool firstTime)
{
	InitTrader(critter);
}

void InitGuard(Critter&critter,bool firstTime)
{
	if(firstTime)
	{
		critter.StatBase[(105)]=(4);
		critter.StatBase[(106)]=(101);
	}
	
	Action@action=LoopAction(true)
	.AddSubAction(Patrol((401),false,true,true))
	.AddSubAction(LookAround(3,((15)*__TimeMultiplier)))
	;
	
	actionManager.Start(critter,action);
}   

void r_RevealLocation(Critter&player,Critter@npc)
{
	Location@location=GetLocationByPid((3),0);
	if(!(@location!=null))
	return;
	
	uint zoneX=location.WorldX/__GlobalMapZoneLength;
	uint zoneY=location.WorldY/__GlobalMapZoneLength;
	
	if(player.GetFog(zoneX,zoneY)==(0))
	player.SetFog(zoneX,zoneY,(1));
	if(player.GetFog(zoneX-1,zoneY)==(0))
	player.SetFog(zoneX-1,zoneY,(1));
	player.SetKnownLoc(true,location.Id);
}
