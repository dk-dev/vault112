

class Serializator
{
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer()
	{
		BufSize+=(128);
		Array.resize(BufSize);
	}
	
	void GrowBuffer(uint length)
	{
		BufSize+=length;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		bool result=SetAnyData(name,Array,DataSize);
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		if(not GetAnyData(name,Array))
		return false;
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator@SetCurPos(uint pos)
	{
		if(pos>BufSize)
		GrowBuffer(pos-BufSize+(128));
		CurPos=pos;
		return this;
	}
	
	Serializator@Fill(uint8 value,uint length)
	{
		if(CurPos+length>BufSize)
		GrowBuffer(CurPos+length-BufSize+(128));
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const bool&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const string&value)
	{
		uint len=value.rawLength();
		if(CurPos+len+1>BufSize)
		GrowBuffer(CurPos+len+1-BufSize+(128));
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int64[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int32[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int16[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int8[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint64[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint32[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint16[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const uint8[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const bool[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const string[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const Critter&cr)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const Item&item)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator@Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator@Get(int64[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(int32[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(int16[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(int8[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(uint64[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(uint32[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(uint16[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(uint8[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(bool[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(string[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator@Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
	uint8[]Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
};          

import Critter@[]SpawnNpcs(uint npcSpawnId,Map&map)from"npc_spawn";     

void dlg_InitSimulation(Critter&player,Critter@npc,string@lexems)
{
	if(!((@lexems!=null)&&lexems.length()==0))
	return;
	
	VRSimulation simulation(player);
	
	lexems+="$type"+simulation.GetTypeInfo();
	lexems+="$location "+simulation.GetLocationInfo();
	lexems+="$combatMode"+simulation.GetCombatModeInfo();
	lexems+="$duration"+simulation.GetDurationInfo();
	lexems+="$spawn"+simulation.GetSpawnInfo();
}

bool d_DurationAvailable(Critter&player,Critter@npc)
{
	VRSimulation simulation(player);
	return simulation.IsDurationAvailable();
}

bool d_SpawnAvailable(Critter&player,Critter@npc)
{
	VRSimulation simulation(player);
	return simulation.IsSpawnAvailable();
}

void r_SetType(Critter&player,Critter@npc,int simulationType)
{
	VRSimulation simulation(player);
	simulation.SetType(simulationType);
}

void r_SetLocation(Critter&player,Critter@npc,int locationPid)
{
	VRSimulation simulation(player);
	simulation.SetLocation(locationPid);
}

void r_SetCombatMode(Critter&player,Critter@npc,int combatMode)
{
	VRSimulation simulation(player);
	simulation.SetCombatMode(combatMode);
}

void r_SetDuration(Critter&player,Critter@npc,int minutes)
{
	VRSimulation simulation(player);
	simulation.SetDuration(minutes);
}

void r_SetSpawn(Critter&player,Critter@npc,int spawn)
{
	VRSimulation simulation(player);
	simulation.SetSpawn(spawn);
}

void r_StartSimulation(Critter&player,Critter@npc)
{
	VRSimulation simulation(player);
	simulation.Start();
}                                                                                                                                                        

class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
}

class ItemHolderWrapper
{ 
	
	private Critter@Npc;
	private Item@Container;
	private dictionary Containers;
	
	ItemHolderWrapper(Critter&npc)
	{
		@Npc=npc;
		Load();
	}
	
	ItemHolderWrapper(Item&container)
	{
		@Container=container;
		Load();
	}
	
	bool HoldsItems(string key)
	{
		return Containers.exists(key);
	}
	
	Item@[]PopItems(string key)
	{
		Item@[]items;
		Item@container=GetContainer(key,false);
		if((@container!=null))
		{
			container.GetItems(0,items);
			Containers.delete(key);
			Save();
		}
		
		return items;
	}
	
	void PutItems(string key,Item@[]items)
	{
		Item@container=GetContainer(key,true);
		if(!(@container!=null))
		return; 
		
		MoveItems(items,container,0);
	}
	
	private Item@GetContainer(string key,bool create)
	{
		Item@container;
		if(Containers.exists(key))
		{
			Containers.get(key,@container);
			return container;
		}
		else if(create)
		{
			if((@Npc!=null))
			@container=Npc.AddItem((467),1);
			else
			@container=Container.AddItem((467),1,0);
			if(!(@container!=null))
			return null;
			((container.Flags=(container.Flags)|((0x00000001))));
			Containers.set(key,@container);
			Save();
		}
		
		return container;
	}
	
	private void Load()
	{
		Serializator serializator;
		if(!serializator.Load(("ItemHolder_"+((@Npc!=null)?("NPC_"+Npc.Id):("Container_"+Container.Id)))))
		return;
		
		uint size=0;
		serializator.Get(size);
		for(uint i=0;i<size;i++)
		{
			string key="";
			serializator.Get(key);
			Item@item;
			serializator.Get(item);
			if((@item!=null))
			Containers.set(key,@item);
		}
	}
	
	private void Save()
	{
		Serializator serializator;
		
		string@[]keys;
		Containers.keys(keys);
		serializator.Set(keys.length);
		for(uint i=0;i<keys.length();i++)
		{
			Item@container;
			Containers.get(keys[i],@container);
			serializator.Set(keys[i]);
			serializator.Set(container.Id);
		}
		serializator.Save(("ItemHolder_"+((@Npc!=null)?("NPC_"+Npc.Id):("Container_"+Container.Id))));
	}
}

class PatrolEntireWrapper
{ 
	
	private uint mapId;
	private Entire@entire;
	private uint patroller;
	
	PatrolEntireWrapper(Map&map,Entire&entire)
	{
		mapId=map.Id;
		@this.entire=entire;
		patroller=0;
		Load();
	}
	
	private void Load()
	{
		Serializator serializator;
		if(!serializator.Load(("PatrolEntire_"+mapId+"_"+entire.Number+"_"+entire.HexX+"_"+entire.HexY)))
		return;
		
		serializator.Get(patroller);
	}
	
	private void Save()
	{
		Serializator serializator;
		
		serializator.Set(patroller);
		serializator.Save(("PatrolEntire_"+mapId+"_"+entire.Number+"_"+entire.HexX+"_"+entire.HexY));
	}
	
	void SetPatroller(Critter@critter)
	{
		patroller=(@critter!=null)?critter.Id:0;
		Save();
	}
	
	bool HasPatroller()
	{
		return patroller!=0;
	}
}

class VirtualRealityInfo
{ 
	
	private uint MapId;
	private uint Type;
	private uint MinNpc1Count;
	private uint MaxNpc1Count;
	private uint MinNpc2Count;
	private uint MaxNpc2Count;
	
	VirtualRealityInfo(Map&map)
	{
		MapId=map.Id;
		Type=0;
		MinNpc1Count=1;
		MaxNpc1Count=2;
		MinNpc2Count=1;
		MaxNpc2Count=1;
		Load();
	}
	
	private void Load()
	{
		Serializator serializator;
		if(!serializator.Load(("VRInfo_"+MapId)))
		return;
		
		serializator.Get(Type);
		serializator.Get(MinNpc1Count);
		serializator.Get(MaxNpc1Count);
		serializator.Get(MinNpc2Count);
		serializator.Get(MaxNpc2Count);
	}
	
	private void Save()
	{
		Serializator serializator;
		
		serializator.Set(Type);
		serializator.Set(MinNpc1Count);
		serializator.Set(MaxNpc1Count);
		serializator.Set(MinNpc2Count);
		serializator.Set(MaxNpc2Count);
		serializator.Save(("VRInfo_"+MapId));
	}
	
	void SetType(uint type)
	{
		Type=type;
		Save();
	}
	
	void SetNpc1Count(uint min,uint max)
	{
		MinNpc1Count=min;
		MaxNpc1Count=max;
		Save();
	}
	
	void SetNpc2Count(uint min,uint max)
	{
		MinNpc2Count=min;
		MaxNpc2Count=max;
		Save();
	}
	
	uint GetType()
	{
		return Type;
	}
	
	uint GetNpc1Count()
	{
		return Random(MinNpc1Count,MaxNpc1Count);
	}
	
	uint GetNpc2Count()
	{
		return Random(MinNpc2Count,MaxNpc2Count);
	}
}                 

shared interface Battle
{
	void AddBattleListener(BattleListener&listener); 
	
	void SetCost(uint cost);
	void SetDuration(uint duration);
	void SetLocation(uint location);
	
	void RefreshTurnBased(Map&map);
	void EndTurnBased(Map&map);
	
	bool CanJoin();
	void ChangeTeam(Critter&player,uint teamIndex);
	void Join(Critter&critter);
	bool IsCreator(Critter&player);
	bool IsPlayer(Critter&player);
	bool IsMap(Map&map);
	Map@GetMap();
	string GetCreatorName();
	
	void Start();
	void End(Critter&creator);
	void Cancel(Critter&critter);
	
	void RefreshClients();
	void RefreshClient(Critter&critter);
	
	void PlayerKilled(Critter&killed,Critter@killer);
	void Respawn(Critter&critter);
}

shared interface BattleListener
{
	void BattleStarted(Battle&battle);
	void BattleFinished(Battle&battle);
	void BattleCancelled(Battle&battle);
}     

import Item@FindHiddenContainer(Map&map)from"stdlib";
import bool UpdateItems(Critter&npc)from"trader";
import Battle@AddHunt(Critter&creator,uint combatMode)from"battleground";
import Battle@AddTeamDeathmatch(Critter&creator,uint combatMode)from"battleground";   

void InitAdmin(Critter&critter,bool firstTime)
{
	if(firstTime)
	{
		critter.StatBase[(104)]=(506);
		critter.ModeBase[(512)]=0;
	}
	
	critter.SetEvent((38),"_VRAdministratorBarter");
}

bool InitTerminal(Critter&critter,Scenery&scenery,int skill,Item@item)
{
	if(skill!=(-1))
	return false;
	
	RunDialog(critter,(505),scenery.HexX,scenery.HexY,true);
	return true;
}

bool _VRAdministratorBarter(Critter&npc,Critter&player,bool attach,uint barterCount)
{  
	
	Item@hiddenContainer=FindHiddenContainer(npc.GetMap());
	ItemHolderWrapper itemHolder;
	
	if((@hiddenContainer!=null))
	itemHolder=ItemHolderWrapper(hiddenContainer);
	else
	itemHolder=ItemHolderWrapper(npc);
	
	if(attach)
	{
		
		UpdateItems(npc); 
		
		Item@[]items;
		player.GetItems((0),items);
		itemHolder.PutItems(("RW_")+player.Id,items); 
		
		if(player.Param[(839)]>0)
		player.AddItem((448),player.Param[(839)]); 
		
		items=itemHolder.PopItems(("VR_")+player.Id);
		MoveItems(items,player);
	}
	else
	{
		
		Item@[]items;
		player.GetItems((0),items);
		
		for(uint i=0;i<items.length();i++)
		{
			
			if(items[i].GetProtoId()==(448))
			{
				player.ParamBase[(839)]=items[i].GetCount();
				items.removeAt(i);
				DeleteItem(items[i]);
				break;
			}
		} 
		
		itemHolder.PutItems(("VR_")+player.Id,items);
		items=itemHolder.PopItems(("RW_")+player.Id);
		MoveItems(items,player);
	}
	
	return true;
}    

class VRSimulation
{ 
	
	private Critter@_Critter;
	private uint Type;
	private uint LocationPid;
	private uint Duration;
	private uint CombatMode;
	private uint Spawn;
	
	VRSimulation(Critter&critter)
	{
		@_Critter=critter;
		Type=(0);
		LocationPid=(301);
		Duration=0;
		CombatMode=(2);
		Spawn=(1);
		Load();
	}
	
	private void Load()
	{
		Serializator serializator;
		if(!serializator.Load(("VRSimulation_"+_Critter.Id)))
		return;
		
		serializator.Get(Type);
		serializator.Get(LocationPid);
		serializator.Get(Duration);
		serializator.Get(CombatMode);
		serializator.Get(Spawn);
	}
	
	private void Save()
	{
		Serializator serializator;
		serializator.Set(Type);
		serializator.Set(LocationPid);
		serializator.Set(Duration);
		serializator.Set(CombatMode);
		serializator.Set(Spawn);
		serializator.Save(("VRSimulation_"+_Critter.Id));
	}
	
	void SetType(uint simulationType)
	{
		Type=simulationType;
		Save();
	}
	
	void SetLocation(uint locationPid)
	{
		LocationPid=locationPid;
		Save();
	}
	
	void SetDuration(uint duration)
	{
		Duration=duration;
		Save();
	}
	
	void SetCombatMode(uint combatMode)
	{
		CombatMode=combatMode;
		Save();
	}
	
	void SetSpawn(uint spawn)
	{
		Spawn=spawn;
		Save();
	}
	
	bool IsDurationAvailable()
	{
		return Type==(1);
	}
	
	bool IsSpawnAvailable()
	{
		return Type==(0);
	}
	
	string GetTypeInfo()
	{
		switch(Type)
		{
			case(0):
			return"Hunt";
			case(1):
			return"Team deathmatch";
		}
		return"NA";
	}
	
	string GetLocationInfo()
	{
		switch(LocationPid)
		{
			case(300):
			return"Green forest labyrinth";
			case(301):
			return"Green forest lane";
		}
		return"Unknown (PID: "+LocationPid+")";
	}
	
	string GetCombatModeInfo()
	{
		switch(CombatMode)
		{
			case(1):
			return"Real time";
			case(2):
			return"Turn-based";
		}
		return"NA";
	}
	
	string GetDurationInfo()
	{
		if(IsDurationAvailable())
		return Duration+" minutes";
		else
		return"NA";
	}
	
	string GetSpawnInfo()
	{
		switch(Spawn)
		{
			case 0:
			return"NA";
			case(1):
			return"Geckos";
			case(2):
			return"Raiders";
		}
		return"Unknown: "+Spawn;
	}
	
	void Start()
	{
		Battle@battle;
		switch(Type)
		{
			case(0):
			@battle=AddHunt(_Critter,CombatMode);
			break;
			case(1):
			@battle=AddTeamDeathmatch(_Critter,CombatMode);
			break;
		}
		
		if(!(@battle!=null))
		{
			_Critter.Say((11),"<error vr01> Cannot start simulation - battle creation failed");
			return;
		}
		
		battle.SetLocation(LocationPid);
		if(IsDurationAvailable())
		battle.SetDuration(Duration);
		if(IsSpawnAvailable()&&(@battle.GetMap()!=null))
		SpawnNpcs(Spawn,battle.GetMap());
		
		battle.Join(_Critter);
	}
}

