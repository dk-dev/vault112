/**
* Author: wladimiiir
*/
#include "_macros.fos"
#include "_npc_pids.fos"
#include "serializator.fos"

import void FindEncounter(Critter@[]& group, Item@ car, uint x, uint y, uint& encounterDescriptor, bool& waitForAnswer, bool empty) from "worldmap";
import void InviteToEncounter(Critter@[]& group, Item@ car, uint encounterDescriptor, int combatMode, uint& mapId, uint16& hexX, uint16& hexY, uint8& dir) from "worldmap";

/**
* Entities
*/
funcdef void WorldmapLeaderAction(Critter& leader, Critter@[]@ playerGroup);

dictionary WorldmapLeaderMap;

class WorldmapLeader
{
	private uint NpcPid;
	private uint BagId;
	private uint[] RouteXs;
	private uint[] RouteYs;
	private uint8 CombatMode;
	private WorldmapLeaderAction@ EncountingEnemyAction;
	private WorldmapLeaderAction@ ReadyToGoAction;
	private WorldmapLeaderAction@ FinishAction;
	private WorldmapLeaderAction@ CancelAction;
	
	WorldmapLeader(uint npcPid)
	{
		NpcPid = npcPid;
		BagId = 0;
		CombatMode = COMBAT_MODE_TURN_BASED;
	}
	
	WorldmapLeader@ AddRoutePoint(uint routeX, uint routeY)
	{
		RouteXs.insertLast(routeX);
		RouteYs.insertLast(routeY);
		return @this;
	}
	
	WorldmapLeader@ SetBag(uint bagId)
	{
		BagId = bagId;
		return @this;
	}
	
	WorldmapLeader@ SetCombatMode(uint8 mode)
	{
		CombatMode = mode;
		return @this;
	}
	
	WorldmapLeader@ SetEncountingEnemyAction(WorldmapLeaderAction@ action)
	{
		@EncountingEnemyAction = action;
		return @this;
	}
	
	WorldmapLeader@ SetReadyToGoAction(WorldmapLeaderAction@ action)
	{
		@ReadyToGoAction = action;
		return @this;
	}
	
	WorldmapLeader@ SetFinishAction(WorldmapLeaderAction@ action)
	{
		@FinishAction = action;
		return @this;
	}
	
	WorldmapLeader@ SetCancelAction(WorldmapLeaderAction@ action)
	{
		@CancelAction = action;
		return @this;
	}
	
	WorldmapRoute@ CreateRoute(Critter& leader, Critter@[] playerGroup)
	{
		WorldmapRoute route(leader);
		
		route.AddFollowers(playerGroup);
		for (uint i = 0; i < RouteXs.length(); i++)
			route.AddRoutePoint(RouteXs[i], RouteYs[i]);
			
		return route;
	}
	
	void RunEncountingEnemyAction(Critter& leader)
	{
		if(!valid(EncountingEnemyAction))
			return;
		
		EncountingEnemyAction(leader, leader.GetGlobalGroup());
	}
	
	void RunReadyToGoAction(Critter& leader)
	{
		if(!valid(ReadyToGoAction))
			return;
		
		ReadyToGoAction(leader, leader.GetGlobalGroup());
	}
	
	void RunFinishAction(Critter& leader)
	{
		if(!valid(FinishAction))
			return;
		
		FinishAction(leader, leader.GetGlobalGroup());
	}
	
	void RunCancelAction(Critter& leader)
	{
		if(!valid(CancelAction))
			return;
		
		CancelAction(leader, leader.GetGlobalGroup());
	}
	
	void Start(Map& startMap, Critter@[] playerGroup)
	{
		if(playerGroup.isEmpty())
			return;
		
		Critter@ leader = startMap.AddNpc(NpcPid, playerGroup[0].HexX, playerGroup[0].HexY, 0, null, null, "InitWorldmapLeader");
		if(!valid(leader))
			return;
		
		if(BagId != 0)
			leader.StatBase[ST_BAG_ID] = BagId;
		leader.ModeBase[MODE_DEFAULT_COMBAT] = CombatMode;
		
		WorldmapLeaderMap.set("" + leader.Id, @this);
		WorldmapRoute@ route = CreateRoute(leader, playerGroup);
		route.GoToGlobal();
	}
}

#define	ROUTE_STATE_READY_TO_GO		(0)
#define	ROUTE_STATE_TRAVELING		(1)
#define	ROUTE_STATE_IN_ENCOUNTER	(2)
#define	ROUTE_STATE_FINISHED		(3)
#define	ROUTE_STATE_CANCELLED		(4)

class WorldmapRoute
{
	#define _GetKey	("WorldmapRoute_" + Leader.Id)
	
	private Critter@ Leader;
	private Critter@[] Followers;
	private uint[] RouteXs;
	private uint[] RouteYs;
	private uint CurrentRoutePointIndex;
	private uint8 State;
	
	WorldmapRoute(Critter& leader)
	{
		@Leader = leader;
		CurrentRoutePointIndex = 0;
		State = ROUTE_STATE_READY_TO_GO;
		Load();
	}
	
	private void Load()
	{
		Serializator serializator;
		if(!serializator.Load(_GetKey))
			return;
		
		uint size = 0;
		serializator.Get(size);
		for (uint i = 0; i < size; i++) 
		{
			uint critterId = 0;
			serializator.Get(critterId);
			Critter@ follower = GetCritter(critterId);
			if(valid(follower))
				Followers.insertLast(follower);
		}
		
		serializator.Get(size);
		for (uint i = 0; i < size; i++) 
		{
			uint routeX = 0;
			uint routeY = 0;
			serializator.Get(routeX);
			serializator.Get(routeY);
			RouteXs.insertLast(routeX);
			RouteYs.insertLast(routeY);
		}
		serializator.Get(State);
		serializator.Get(CurrentRoutePointIndex);
	}
	
	private void Save()
	{
		Serializator serializator;
		
		serializator.Set(Followers.length());
		for (uint i = 0; i < Followers.length(); i++)
			serializator.Set(Followers[i].Id);
		
		serializator.Set(RouteXs.length());
		for (uint i = 0; i < RouteXs.length(); i++)
		{
			serializator.Set(RouteXs[i]);
			serializator.Set(RouteYs[i]);
		}
		serializator.Set(State);
		serializator.Set(CurrentRoutePointIndex);
		serializator.Save(_GetKey);
	}
	
	private WorldmapLeader@ GetWorldmapLeader()
	{
		WorldmapLeader@ leader;
		WorldmapLeaderMap.get("" + Leader.Id, @leader);
		return leader;
	}
	
	void AddRoutePoint(uint routeX, uint routeY)
	{
		RouteXs.insertLast(routeX);
		RouteYs.insertLast(routeY);
		Save();
	}
	
	void AddFollowers(Critter@[] followers)
	{
		for (uint i = 0; i < followers.length(); i++)
			Followers.insertLast(followers[i]);
			
		if(!followers.isEmpty())
			Save();
	}
	
	private void SetState(uint8 routeState)
	{
		State = routeState;
		Save();
	}
	
	uint8 GetState()
	{
		return State;
	}
	
	bool HasEnded()
	{
		return CurrentRoutePointIndex >= RouteXs.length();
	}
	
	void GoToGlobal()
	{
		Critter@[] globalGroup = {Leader};
		for (uint i = 0; i < Followers.length(); i++)
			globalGroup.insertLast(Followers[i]);
			
		Leader.TransitToGlobal(Followers);
	}
	
	bool SetNextRoutePoint(float x, float y, float& toX, float& toY)
	{
		if(HasEnded())
			return false;
		
		if(float(RouteXs[CurrentRoutePointIndex]) == x 
			&& float(RouteYs[CurrentRoutePointIndex]) == y)
		{
			//go to next point
			CurrentRoutePointIndex++;
			Save();
		}
			
		if(CurrentRoutePointIndex >= RouteXs.length())
			return false;
		
		toX = float(RouteXs[CurrentRoutePointIndex]);
		toY = float(RouteYs[CurrentRoutePointIndex]);
		
		return true;
	}
	
	void EncountingEnemy()
	{
		SetState(ROUTE_STATE_IN_ENCOUNTER);

		WorldmapLeader@ wmLeader = GetWorldmapLeader();
		if(valid(wmLeader))
			wmLeader.RunEncountingEnemyAction(Leader);
	}
	
	void ReadyToGo()
	{
		SetState(ROUTE_STATE_READY_TO_GO);

		WorldmapLeader@ wmLeader = GetWorldmapLeader();
		if(valid(wmLeader))
			wmLeader.RunReadyToGoAction(Leader);
	}
	
	void Finish()
	{
		SetState(ROUTE_STATE_FINISHED);

		WorldmapLeader@ wmLeader = GetWorldmapLeader();
		if(valid(wmLeader))
			wmLeader.RunFinishAction(Leader);
			
		EraseAnyData(_GetKey);
	}
	
	void Cancel()
	{
		SetState(ROUTE_STATE_CANCELLED);
		
		WorldmapLeader@ wmLeader = GetWorldmapLeader();
		if(valid(wmLeader))
			wmLeader.RunCancelAction(Leader);
			
		EraseAnyData(_GetKey);
	}
}

/**
* Init functions and events
*/
void InitWorldmapLeader(Critter& leader, bool)
{
	leader.StatBase[ST_CHARISMA] = 10;
	
	leader.SetEvent(CRITTER_EVENT_GLOBAL_PROCESS, "_LeaderOnGlobal");
	leader.SetEvent(CRITTER_EVENT_GLOBAL_INVITE, "_LeaderOnInvite");
    leader.SetEvent(CRITTER_EVENT_DEAD, "_LeaderOnDead");
    leader.SetEvent(CRITTER_EVENT_SMTH_DEAD, "_LeaderOnSeeSmthDead");
    leader.SetEvent(CRITTER_EVENT_SMTH_USE_SKILL, "_LeaderOnSmthUseSkill");
    leader.SetEvent(CRITTER_EVENT_PLANE_BEGIN, "_LeaderOnPlaneBegin");
    leader.SetEvent(CRITTER_EVENT_PLANE_END, "_LeaderOnPlaneEnd");
}

bool _LeaderOnGlobal(Critter& leader, int type, Item@ car, float& x, float& y, float& toX, float& toY, float& speed, uint& encounterDescriptor, bool& waitForAnswer)
{
	WorldmapRoute route(leader);
	Critter@[]@ group = leader.GetGlobalGroup();
	
	if(type == GLOBAL_PROCESS_MOVE || type == GLOBAL_PROCESS_STOPPED)
        if(!IsPlayerInGroup(group))
        {
            route.Finish();
            return true;
        }
	
	if(encounterDescriptor != 0)
        return false;
        
    if(!route.SetNextRoutePoint(x, y, toX, toY))
    {
		route.Finish();
		return true;
	}
	
	if(type != GLOBAL_PROCESS_MOVE)
	{
		if(route.HasEnded())
			route.Finish();
		
		speed = GLOBAL_MAP_BASE_SPEED;
		
		return true;
	}
	
	waitForAnswer = false;
	return false;
}	

bool _LeaderOnInvite(Critter& leader, Item@ car, uint encounterDescriptor, int combatMode, uint& mapId, uint16& hexX, uint16& hexY, uint8& dir)
{
	return false;
}

int _LeaderOnPlaneBegin(Critter& leader, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem)
{
	if(plane.Type == AI_PLANE_ATTACK)
	{
		WorldmapRoute route(leader);
		if(!route.HasEnded())
			route.EncountingEnemy();
	}
	
	return PLANE_RUN_GLOBAL;
}

int _LeaderOnPlaneEnd(Critter& leader, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem)
{
	if(leader.GetPlanes(AI_PLANE_ATTACK, null) == 0)
	{
		WorldmapRoute route(leader);
		if(!route.HasEnded())
			route.ReadyToGo();
	}
	
	return PLANE_RUN_GLOBAL;
}

void _LeaderOnDead(Critter& leader, Critter@ killer)
{
	WorldmapRoute route(leader);
	if(!route.HasEnded())
		route.Cancel();
}

void _LeaderOnSeeSmthDead(Critter& leader, Critter& fromCrit, Critter@ killer)
{
	
}

void _LeaderOnSmthUseSkill(Critter& leader, Critter& fromCr, int skill, Critter@ onCritter, Item@ onItem, Scenery@ onScenery)
{
	
}

bool IsPlayerInGroup(Critter@[]& group)
{
    for(uint i = 0; i < group.length(); i++)
        if(group[i].IsPlayer())
            return true;
            
    return false;
}

void Test(Critter& critter, int, int, int)
{
	WorldmapLeader@ leader = WorldmapLeader(NPC_PID_Claire)
		.AddRoutePoint(704, 521)
		.AddRoutePoint(758, 569)
		.AddRoutePoint(704, 521)
		.AddRoutePoint(758, 569)
		.AddRoutePoint(704, 521)
		.AddRoutePoint(758, 569)
		.AddRoutePoint(704, 521)
		.AddRoutePoint(758, 569)
		.AddRoutePoint(704, 521)
		.AddRoutePoint(758, 569)
		.AddRoutePoint(704, 521)
		.AddRoutePoint(758, 569)
		.AddRoutePoint(704, 521)
		.AddRoutePoint(758, 569)
		.SetReadyToGoAction(ScheduleToGlobal)
		.SetEncountingEnemyAction(EnemyFound)
		.SetCancelAction(DeleteLeader)
		.SetFinishAction(GoToLocation);
		
	Critter@[] players = {critter};
	leader.Start(critter.GetMap(), players);
}

#define	CTE_GO_TO_GLOBAL			(564616)

void ScheduleToGlobal(Critter& leader, Critter@[]@ playerGroup)
{
	leader.Say(SAY_NORM, "We are leaving in a few. Get ready");
	leader.AddTimeEvent("cte_ToGlobal", 10, CTE_GO_TO_GLOBAL);
}

uint cte_ToGlobal(Critter& leader, int identifier, uint& rate)
{
	WorldmapRoute route(leader);
	if(!route.HasEnded())
		route.GoToGlobal();
	return 0;
}

void EnemyFound(Critter& leader, Critter@[]@ playerGroup)
{
	leader.EraseTimeEvents(CTE_GO_TO_GLOBAL);
}

void GoToLocation(Critter& leader, Critter@[]@ playerGroup)
{
	uint encounterDescriptor = 0;
	bool waitForAnswer = false;

	FindEncounter(playerGroup, null, leader.WorldX, leader.WorldY, encounterDescriptor, waitForAnswer, true);
	if(encounterDescriptor != 0)
	{
		uint mapId = 0;
		uint16 hexX = 0, hexY = 0;
		uint8 dir = 0;
		
		InviteToEncounter(playerGroup, null, encounterDescriptor, leader.Mode[MODE_DEFAULT_COMBAT], mapId, hexX, hexY, dir);
		
		Map@ map = GetMap(mapId);
		if(!valid(map))
			return;
			
		for (uint i = 0; i < playerGroup.length(); i++)
			playerGroup[i].TransitToMap(mapId, hexX, hexY, dir);
	}
}

void DeleteLeader(Critter& leader, Critter@[]@ playerGroup)
{
	DeleteNpc(leader);
}

