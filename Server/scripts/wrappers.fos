/**
* Author: wladimiiir
*/

#ifndef __WRAPPERS__
#define __WRAPPERS__

#include "_macros.fos"
#include "entire_h.fos"
#include "serializator.fos"

class ItemHolderWrapper
{
	#define _GetKey		("ItemHolder_" + (valid(Npc) ? ("NPC_"  + Npc.Id) : ("Container_" + Container.Id)))
	
	private Critter@ Npc;
	private Item@ Container;
	private dictionary Containers;
	
	ItemHolderWrapper(Critter& npc)
	{
		@Npc = npc;
		Load();
	}
	
	ItemHolderWrapper(Item& container)
	{
		@Container = container;
		Load();
	}
	
	bool HoldsItems(string key)
	{
		return Containers.exists(key);
	}
	
	Item@[] PopItems(string key)
	{
		Item@[] items;
		Item@ container = GetContainer(key, false);
		if(valid(container))
		{
			container.GetItems(0, items);
			Containers.delete(key);
			Save();
		}
		
		return items;
	}
	
	void PutItems(string key, Item@[] items)
	{
		Item@ container = GetContainer(key, true);
		if(!valid(container))
			return;
			
		//~ Log("Moving items");
		MoveItems(items, container, 0);
	}
	
	private Item@ GetContainer(string key, bool create)
	{
		Item@ container;
		if(Containers.exists(key))
		{
			Containers.get(key, @container);
			return container;
		}
		else if(create)
		{
			if(valid(Npc))
				@container = Npc.AddItem(PID_HIDDEN_CONTAINER, 1);
			else
				@container = Container.AddItem(PID_HIDDEN_CONTAINER, 1, 0);
			if(!valid(container))
				return null;
			_ItemSetHidden(container);
			Containers.set(key, @container);
			Save();
		}
		
		return container;
	}

	private void Load()
	{
		Serializator serializator;
		if(!serializator.Load(_GetKey))
			return;
		
		uint size = 0;
		serializator.Get(size);
		for (uint i = 0; i < size; i++)
		{
			string key = "";
			serializator.Get(key);
			Item@ item;
			serializator.Get(item);
			if(valid(item))
				Containers.set(key, @item);
		}
	}
	
	private void Save()
	{
		Serializator serializator;
		
		string@[] keys;
		Containers.keys(keys);
		serializator.Set(keys.length);
		for (uint i = 0; i < keys.length(); i++)
		{
			Item@ container;
			Containers.get(keys[i], @container);
			serializator.Set(keys[i]);
			serializator.Set(container.Id);
		}
		serializator.Save(_GetKey);
	}
}

class PatrolEntireWrapper
{
	#define _GetKey		("PatrolEntire_" + mapId + "_" + entire.Number + "_" + entire.HexX + "_" + entire.HexY)
	
	private uint mapId;
	private Entire@ entire;
	private uint patroller;
	
	PatrolEntireWrapper(Map& map, Entire& entire)
	{
		mapId = map.Id;
		@this.entire = entire;
		patroller = 0;
		Load();
	}
	
	private void Load()
	{
		Serializator serializator;
		if(!serializator.Load(_GetKey))
			return;
		
		serializator.Get(patroller);
	}
	
	private void Save()
	{
		Serializator serializator;
		
		serializator.Set(patroller);
		serializator.Save(_GetKey);
	}
	
	void SetPatroller(Critter@ critter)
	{
		patroller = valid(critter) ? critter.Id : 0;
		Save();
	}
	
	bool HasPatroller()
	{
		return patroller != 0;
	}
}

class VirtualRealityInfo 
{
	#define _GetKey		("VRInfo_" + MapId)
	
	private uint MapId;
	private uint Type;
	private uint MinNpc1Count;
	private uint MaxNpc1Count;
	private uint MinNpc2Count;
	private uint MaxNpc2Count;
	
	VirtualRealityInfo(Map& map)
	{
		MapId = map.Id;
		Type = 0;
		MinNpc1Count = 1;
		MaxNpc1Count = 2;
		MinNpc2Count = 1;
		MaxNpc2Count = 1;
		Load();
	}
	
	private void Load()
	{
		Serializator serializator;
		if(!serializator.Load(_GetKey))
			return;
		
		serializator.Get(Type);
		serializator.Get(MinNpc1Count);
		serializator.Get(MaxNpc1Count);
		serializator.Get(MinNpc2Count);
		serializator.Get(MaxNpc2Count);
	}
	
	private void Save()
	{
		Serializator serializator;
		
		serializator.Set(Type);
		serializator.Set(MinNpc1Count);
		serializator.Set(MaxNpc1Count);
		serializator.Set(MinNpc2Count);
		serializator.Set(MaxNpc2Count);
		serializator.Save(_GetKey);
	}
	
	void SetType(uint type)
	{
		Type = type;
		Save();
	}
	
	void SetNpc1Count(uint min, uint max)
	{
		MinNpc1Count = min;
		MaxNpc1Count = max;
		Save();
	}
	
	void SetNpc2Count(uint min, uint max)
	{
		MinNpc2Count = min;
		MaxNpc2Count = max;
		Save();
	}
	
	uint GetType()
	{
		return Type;
	}
	
	uint GetNpc1Count()
	{
		return Random(MinNpc1Count, MaxNpc1Count);
	}
	
	uint GetNpc2Count()
	{
		return Random(MinNpc2Count, MaxNpc2Count);
	}
}

class StatsManager
{
	#define	_GetKey # (key) ("Stats_" + key +"_" + _Critter.Id)
	
	private Critter@ _Critter;
	
	StatsManager(Critter& critter)
	{
		@_Critter = critter;
	}
	
	/**
	* Loads critter stats for specified key
	* Returns true if there are stats under specified key, false otherwise
	*/
	private bool LoadStats(string key)
	{
		Serializator serializator;
		if(!serializator.Load(_GetKey(key)))
			return false;
			
		//TODO: what to load (save)
		return true;
	}
	
	/**
	* Saves current critter stats for specified key
	*/
	private void SaveStats(string key)
	{
		//TODO: what to save
	}
}

#endif //__WRAPPERS__
